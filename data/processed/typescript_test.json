{"ids": ["SUanV0z7", "PvMWRWTM", "nQgsnSCw", "DAoaGSIT", "B0VDfpM7", "akGgwWic", "BkEPlg0E", "ZDObFK4j", "2c1KvzHI", "fqtVb12q", "RdDGAtbH", "bvpwD2MN", "bbqhsL5J", "NdD9N2dP", "QVOeBaIi", "wPvBJqcC", "EBAgDpjW", "kstp8feV", "zl7k0Fdy", "0jk9uiWG", "Xfp8OQov", "Jy3QOh2W", "5EU2uCUe", "vGMNoatA", "I4gjFxa2", "pw5D7Wac", "bBHu0ekQ", "XdN43Q7o", "7exwhCFL", "z7x1tWzz", "2OfgjXl7", "UE60AaIE", "iXwcyTlw", "LAtzx6CO", "iHM6XOCU", "F1l9nprw", "PpMkB61j", "lSUxEGpB", "9LDx0b6V", "fCWjc4vl", "iRvaXdPj", "cGmgMVq9", "2YtlwYid", "Fc8HFY4r", "yp87mSrN", "0LKpRxmr", "84GiNpLv", "gj7TCVsr", "ip30NoWR", "nWcCIjB8", "92rxIjpg", "XaqQnLi7", "AszUv9Dq", "ONxeCG3J", "JWM21hRG", "aOIsF4Hx", "LyZmOAsc", "Z3t7f9rL", "zS2syjZy", "LeeuLgzw", "Rz03dak9", "vVCnsDZT", "fB4f6Hc8", "MlVxZLAa", "SMsTbIiy", "WapMJ7mz", "gdbUh34T", "sJdeH7VJ", "tCv8Jfeg", "9pIKpxqw", "vzc0MG4O", "lYNFi2C6", "GOGuAU00", "iUy8V3gs", "smJsYjTH", "sRRO12mP", "FwyvQLdn", "PxCXskVC", "lLrTsawm", "TQ8rE5PR", "v5TVC6m1", "Po1o5HnI", "W6MRQT2F", "CNBihI2N", "hYXyVefl", "qXxIgnPF", "efR7FEZd", "Xw50OUc2", "9cWkLPPI", "77cWAiza", "BNq3hCfv", "XK5dpuqQ", "ib1C9fic", "IN17ihqA", "H07zBo0p", "KunpNbh4", "sw33pnpK", "CRjCa30y", "PYXcDvyD", "8pCCZKjx", "gsyT8X6Y", "MGOFiDms", "GdWlT7QM", "vaXp5Bc0", "pw4C838P", "VfEmGKfJ", "upTdlCFt", "oN5uJ9fm", "SWzk8LCI", "pDrHQlKk", "Bwefj6ag", "0uKresyh", "DDLAU25b", "4lpO2GyT", "DsV8u1t6", "zpd4xBBU", "2qQemTfS", "jf4SOk3v", "4d4LxDpC", "MG8DwPGt", "YoYh9ylE", "6rmUWZCb", "TkniARxp", "QObGgcuC", "MP43yeJa", "qU2ocYW0", "LRcfP0MY", "ewUoXqH2", "XONEM3zN", "vjpnqJ9n", "L6bNpbfO", "bKWaE0ci", "As8kLT13", "FO5REMPk", "avOe9krt", "NyFX3K51", "4vBsBeGd", "c1x5cn4H", "IAv9YCs1", "B2IuV7Ls", "xf9NwroS", "urV6OQ4O", "FILeHnLr", "bsNzvTDn", "ugPGbKqC", "UBzZyvKx", "Vj4kawUD", "twBZFOAn", "1rCBB2tZ", "FDHOoniy", "uSgGknTl", "39pf3468", "EkAMfrJd", "FpA3YCj7", "hBFAwsWH", "gsWezLEV", "oPz1ZIS0", "E2V7XqgS", "jcXT1SYU", "MrDDoPxM", "OUwlPMKm", "pZnQFn8s", "SC0WUE8a", "rFUCB2D1", "rnhoLTBk", "HkccTkPg", "t9PljaZu", "hzWwRYUX", "WaMkQ4gb", "apHKQTgl", "EWpNF9M2", "0QvI1Yrz", "Ag3fPHT9", "vjysAmFk", "KOylLzh2", "1Pg6gXaf", "9JyB9Ba2", "1KHXb0Qt", "6Waft0hP", "0hZPqUUi", "TvRaJ9St", "MUwLJaYZ", "HW8mppbD", "dwRXMMrX", "IdYdIdQq", "HKCs90KQ", "N33a42Yx", "UZtDOfPj", "LC5bANKx", "eZQHzLlw", "Q3uBQ5Ds", "MucR5Iq6", "ggbRJNSj", "er6gAUKc", "vqzwNxer", "GRGETVCh", "RgGR1DNV", "6ChdsUuV", "i8HW6XAT", "OkOKuFqV", "MxauK9FN", "PUmSHnWl", "uvy1Nzv1", "ha9dBxGT", "Ty0zIXWx", "O3FnNRDR", "aDGJj8fv", "L3jiUJSy", "m3zWdqzr", "UlLihjVK", "OAbBveqG", "cHCB6V6q", "grZIxqjc", "UlBd4B5x", "5rpcR9NK", "j47zni62", "aifdSCor", "YpHVa63C", "kbdI1SdW", "8gBWi9Fi", "OWCARVvb", "xBBUUEhL", "SK3EQue2"], "dialog": [["hello all. i am trying to find a way to grab parameters from a function using generics. i know that you have  code", "not sure what you mean", "link . i want to be able to determine the params the function needs and the return type of the function when called inside  code . i am trying different scenarios to get it working", "to be clear, the final call should look like  code  right?", "correct", "i need to go do something else for a bit but this is how i implemented that here:  link . maybe you can figure it out from there", ":d oh nice let me take a look. nice query never saw this one"], ["@anyhowstep ... yup i'm dumb and need to fully read the docs before i ask any more dumb questions. weird that you could assign null to something that is declared as a function... that seems ripe for causing all kinds of errors. i would think that's the whole point of using something like typescript.", "unless you enable strictnullchecks, null and undefined are assignable to everything. it\u2019s indeed very, very unsafe and that\u2019s why that flag was implemented the behavior exists for historical reasons mostly - ts used to be a lot dumber and had to be more lenient in the past to avoid \u201cgetting in the way\u201d. nowadays i just enable  code  in new projects", "thanks"], ["hi guys, i would like to know a way to import json from a json file into a typescript file", "import it in what format? like import json straight into a variable?", "i don't think your question makes sense any more than say \"how do you import a .txt \" file into typescript. or how do i import an \".html\" file into typescript.", "json files must be read using whatever library, parser, or facility your runtime environment provides.", "it's not a native language feature.", "you can, however, describe the content of the json using interfaces, so that when you read it in using whatever method is appropriate, you  get intellisense in accessing that json's members."], ["hello,", "i have some annoying bugs related to typescript's typing of webcrypto functions. i tried many times to correct them myself and i don't think i have the correct mental model of what needs to happen. when i filed a bug, there was a generic \"thank you, plz contribute\" response - i'm looking for help on the matter. bug in question:  issue . another bug that i did not file since it imo falls under similar domain, is the fact that all webcrypto.subtle function return a promiselike instead of a promise, which makes using catch impossible. i remember reading somewhere that modifying the class file is a big no-no and requires going through some hoops, which frankly sound over-complex and unintuitivly include several repos", "i would really like to get those bugs fixed and would love to work with someone so i may learn how to contribute future bug fixes / improvements to the type system"], ["hello.  code  what should be \"as\" type?", "tried with  code", "merry christmas guys", "you sure that's right?  code  where the string default arg matches component? you can't call a string as a react element"], ["i want to make a generic with constraints to objects that all of values in them are from limited types. i have a feeling it's possbile, but i can't get it right. here's my failed attempt:  code", "would irow be your interface and then genericrow and specificrow be your implementations?", "igenericrow is just to make the constraint. i came across this issue:  link", "i suppose i do not understand the purpose fully. is probably a limitation of my brain. you just want to enforce that all implementations only have properties with string number or date types?", "yes. it's for database row", "try mapped types, they might get what you're looking for.  code", "thanks, i might just wait for ts  id"], ["is it possible to get the runtime value of a type using a value from the compiler api (e.g. type, symbol, node)?", "i've had pretty good success walking the ast to find the nodes i want, at least within some limited prototyping... but then i don't actually know what to do with the nodes once i find them. like for the heck of it i tried dynamically requireing their sourcefile to get at them but that only works if they're exported.", "this is basically the same question -  link", "oh this might be helpful thank you", "basically, for the generic case not really, you'd have to actually run the code", "i was considering doing some chicanery and just using types instead of runtime values for the data i want, but that has its own problems. this is a very narrow case and i can probably just walk the tree. basically what i'm doing is walking the ast to find types of thrown errors, then filtering for ones that are subtypes of a specific abstract base class, then trying to get swagger schemas and statuses out of them. those are well defined types so i feel like i should be able to get what i need. thank you for spotting that, it's been hard for me to search any of this lol", "sounds like that is horrible as soon as you call a function that might throw something, that might dynamically import another file... good luck!", "well i'm going for a best case effort rather than completeness. like if i can statically determine the thrown errors awesome, if not too bad"], ["what's mean of the inferred type of 'bar' references an inaccessible 'this' type. a type annotation is necessary.  code", "change to bar() :  code  ...", "thanks  . i found a easy way to tell compiler about type annotation."], ["hi: i need some advice on how to clear this typescript error. i have an httpclient request that can either error on the server, or error on the client if it gets http intercepted when some condition isn't met. right now, both error.code and error.status are being underlined in red because property 'code' does not exist on type httperrorresponse and property 'status' does not exist on type clienterror. this is true, neither of those properties exist on their respective classes. however i thought the | pipe would take care of that, and greenlight any properties that exist on either error type. what am i doing wrong?  code", "| says error is httperrorresponse xor clienterror, if you want error to be both, you need &", "oh wow cool, another til. thanks"], ["one bug i dislike is when modifying a prop: record<string, foo> to prop: map<string, foo> which results in occurrences of object. values(this.prop) not being a type error, although now that always returns an empty array because all the values in this.prop are now inside the map and need to be accessed in a different way. the code silently becomes a bug. i wish we could express class properties as readable on the outside, writable on the inside  issue , instead of having to write  code . we would be able to write something shorter like   code . or, maybe just the following is simpler and better!  code . ooooh, here we go, this one is terser:  code ."], ["hello, i am experimenting with microsoft/typescript#21847. what i would like is to create a type that includes all strings except for \"\", i thought something like this would work  code  so i was expecting an error, but no, it compiles fine. also test(\"a\"); compiles fine. i didn't get the reason why, do you have an explanation of why this won't work / a link i can read? (i'm on version id -dev.20180322). thanks!", "i'm pretty sure there's a bug there, i think that should work...", "thanks, i guess i'll open an issue then"], ["how can i use promises in typescript code while at the same time targeting es5 inside tsconfig.json ?"], ["putting aside whether i should or shouldn't, i was wondering something. let's say i extended array to add a unique() method to its prototype. this would live in a package which gets imported by various other packages. what would i need to do to make it simply work for something like string[]? example:  code", "do i need to put the declaration in a d.ts file? if so, is it enough to simply import the module, or will i need to add it to ts's typeroots?", "if you put it in a d.ts file it won't get emitted.", "looks like it works by importing the file into my helper package's index, then i can simply import 'helper-pkg' anywhere.  yes. i meant the declare part. looks like i don't need to use the d.ts though!", "i was talking about the declare part - d.ts files don't get copied into your output. sorry, i meant the emitted declarations.", "ah ok. that makes sense. for these projects i'm not emitting, but i imagine that means ts-node would also ignore.", "yeah my understanding is that those only effect the local project's build, if that makes sense.", "absolutely does. thanks!"], ["can anyone explain to me how i can get my jquery plugins working with typescript?  i'm trying to get  link  working but there is no typings file available.  any idea on a quick way i can make this happen?", "did you trynpm i -s @types/jquery?", "doh, misread that.", "you should be able to merge your declarations on top of the jquery declarations like:  link", "yeah, i\u2019m trying to sort it out but can\u2019t seem to figure it out.  let me check this doc", "i\u2019m using  code", "whoa\u2026somehow now that works", "maybe i just needed to recompile", "huh. strange.", "still, glad that worked for you"], ["hi, is there a more efficient way of writing this? i want to exit my function in case this promise is fulfilled and returns true.  code  i tried this but it doesn't work:  code", "does return inside of the than exist the outer function? sounds like your just returning the last .thenwith an empty promise?"], ["is there a way for my node terminal to give me errors from the typescript file and not the js file. i have source maptrue in my ts config.json and theres a.map file that gets spit out in the same directory as the file that it maps", "if i paste your transpiled example as is, it also works. but i'm on node id", "yeah it works for me now too", "it was a syntax error elsewhere in the file", "oh ok", "do you inline your sourcemaps?", "you need to use  link  for typescript stack traces in node"], ["is there a type for any function?", "code", "thanks a lot"], ["here's another problem  code . but note that this is fine:  code", "and again you actually need to use generics?", "hahaha", "dont you know i just put <t> on all my methods for fun by now? alright, let me explain what im doing", "im writing a clone() method", "that recursively clones a js obj", "so i do something liketype myobject = number | string | boolean | buffer", "i even have code in there, but it's not really relevant", "but yeah, the idea is that i want the signature of my clone method to befunction clone<t extends genericobject>(x: t): t", "in order to ensure that when i try to clone something, i've actually written a rule for how it should be cloned, so i dont accidentally try to clone something i can't.", "hopefully that's a simple and understandable use case, perhaps unlike yesterday", "but you don't have to make x be of type t", "hm?", "nevermind i see it now", "write up another issue, they seem to be really responsive.", "kk"], ["hello! the  code  fails to infer the appropriate signature from the type guard function with overload. is there anyone who can help me with this? playground  link . i want to use overload to reduce duplicate type guard functions. it works well elsewhere, but when used as a parameter for  code , it works not properly. i know the order of overload signatures is important. that signature should be written in order of specificity and generality. and i know that compiler infer the first applicable signature. however, it is difficult to understand how the signature of  code  is inferred in  code . when a function is passed to a parameter, could you explain how the signature is inferred from the overload of the function?", "that kind of looks like a bug to me... overloads are really weird though."], ["hi, i often have an object literal i'd like to infer types from, but i don't won't the types of properties to be literal, but number or string instead. is there a generic type i can use for this purpose?"], ["hi all, ts novice here. this line:  link  gives me this error:  link . i don't really get why. may someone help me understand and possibly fix it?", "i don't know exactly how vue works but you are inside an arrow function, \"this\" is not the same \"this\" as in all the other functions. read more about it here:  link .don\u2019t use arrow functions on an options property or callback.", "ah! thank you, using a function i got this error instead:  code .", "can you post an example? otherwise you should be able to do something like this:  code  .", "i got that error on the same line (please note i have changed the arrow function to a function)  link . ok, this seems to fix, i am not quite sure why i have to do this though: link  ."], ["hmm.. i'm seeing some weirdness with namespace declaration merging so i have this declaration file  code . and then i use it like this:  code  and that's  fine. but i want to export foo interface alias. but when i try that i get an error  code", "you are switching form a script file to a module file when you add top-level exports.", "namespace merging does not work across module files, if i remember correctly.", "hmm.. so maybe i have to put a declare global around the namespace", "let me try", "bingo! thanks"], ["how would i use a proxy on a class if i\u2019m trying to intercept a static method?"], ["would it be possible to ensure this in typescript:  code  where t is a union type", "looks like it works when i do  code  but i don\u2019t understand why  code  doesn\u2019t work and i need to have handle method signature as", "yea, those are two distinct signatures, with option2<\"a\" | \"b\">, you can't use o.t in a switch statement to differentiate between option2<\"a\"> and option2<\"b\"> this is because a<\"a\" | \"b\"> gives type  code ... the best way around this i've found is a ton of helper methods like these.", "so this doesn\u2019t work, but why? :] is this a bug? i don\u2019t quite understand how these helpers help in this situation (no pun intended)", "it's not a bug, just a limitation. this might help:  code", "oh ok helps thanks!", "my pleasure!"], ["hi all does typescript have anything like flow's type guards using if statements? so let's say we have two types:  code . i've been trying to do if(!foo.enc)  code . but it raises a type error property p2 does not exist on type (t_encfoo | t_decfoo) so flow is smart enough to figure out that this can only be t_decfoo since foo.enc is false in this branch", "the question is [w]hat's the type of foo", "right. what i'm saying is that foo in this function can be either t_encfoo | t_decfoo. but in flow you can define static values for some properties that allows it to differentiate between types. so in the example above, the value of enc differentiates the two types. so in correctly guarded branches, it shouldn't complain. i'm wondering if/why not typescript does/does not do this", "you forgot the equal (=) sign when defining your types : the following works well in my vscode using ts id  code  here's my tsconfig.json  code"], ["can i generate a type from what a function returns?", "yes depending on typescript version   code  needs version  id  or higher", "nice! thanks, i'll check it out works super! thanks a ton"], ["hi guys, how can i solve this error in typescript in function, when i hover on function..  link  and the error is   code", "i think your answer lies in function parameter bivariance when comparing the types of function parameters, assignment succeeds if either the source parameter is assignable to the target parameter, or vice versa. this is unsound because a caller might end up being given a function that takes a more specialized type, but invokes the function with a less specialized type. in practice, this sort of error is rare, and allowing this enables many common javascript patterns."], ["how do i stub omit for older versions of ts?", "code", "but if i define it wont it yell it's already defined? should i just put it in a namespace or name it something else?", "yep, it will. how old do you need to support? omit has been around since  id ... mayish", "i'm building and it's yelling, not sure. should be id and it's yelling. cannot find name 'omit'.", "what's your lib set to?", "is that in tsconfig? i just ran a scafolded project unsure", "yep, should be under compileroptions", "there is none", "in that case, what's your target? actually, it should be there regardless. it is in lib.es5.d.ts. i guess if you are targeting es3 it might not be there", "target is es2017. this may be a wonky scafold", "in that case ts should be loading lib.es2017.full.d.ts -> lib.es2017.d.ts -> lib.es2015.d.ts -> lib.es5.d.ts which includes it", "i made a thing with the help of all of you  link"], ["question: i have a method that accepts union type 'a' | 'b' as an argument. the method then makes an api call using that argument, and i can logically predetermine the resulting interface based upon said argument (e.g. if 'a' then interfacea, if 'b' then interfaceb). is it possible to specify that return type in ts? at the moment i have it returning promise<interfacea | interface b> but that's not ideal.", "i've tried something like if (arg === 'a') resolve(data as interfacea); (etc) to no avail.", "something like:  code  ?", "works a charm, thanks  !"], ["hi guys,", "how i can find definitions for typescript? maybe exist some service? like npm", "you actually use npm as long as you are using typsecript  id  +   link  so for  example if you need types for lodash", "you do  code"], ["currently, typescript/javascript debugging in vs2015 is a mess (  link  ). can we hope that web client script debugging will be strongly improved with vs 2018?"], ["hi, can i ask a syntax question here?", "try", "code   this works, but i was wondering if there was a construct like this:  code", "i'm lazy you see", "code  works fine too, so i was wondering if there was a similar way for class variables", "const [a,b] = [foo\u2018, bar'] like this ?", "that works, the problem is that typeaprivatelist and typebprivatelist are class variables, they are already declaerd in the constructor"], ["hey, guy. i got an error message when use spread operator on react component.  code", "don't use react? or, just add dsa to your typographyprops interface"], ["is there any way to type a \"plainobject\" without generic in fn?  code  playground  link", "yeah so the problem there is plainobject isn't guaranteed to have a name. i don't think that  code  does what you think it does.  code  @anyhowstep wait, you're not being sarcastic? ts's error was correct?", "yeah i don't wanna do that. i just need a way to assert that: a function takes one plain object, a array is of many functions that take one plain object, an object's values are 'of many functions that take one plain object", "this works:  code . the problem is you've already said plainobject's props are any so you can't then narrow it in a destructuring"], ["what\u2019s the easiest way to directory  through a change to the compiler? there\u2019s no vscode launch.json for instance. also, i can\u2019t seem to get sourcemaps to work. :/", "hrm, had to build with jake (why are there two build tools?) and change it to no longer add -maproot\u2026 but it skips my breakpoints, even with stoponentry, only works if i use \u201cdebugger;\""], ["i need to import a class and re-export it. is  code  the proper way to do this (i need to export both translator and doexport)?", "yep, that's how i'd do it. if you wanted you could drop the export on [<-code_>] and instead do  code , but i personally prefer the export being right next to the declaration. if you don't need  code  in that file, you could just do  code", "same. alright, thanks! the results looked correct, just wanted to know i was doing it right. i do need translator there."], ["how can i create a dynamic instance of a class? something like this:  code"], ["hmm unless i'm missing something, i think that the createsourcereplacingcompilerhost can lose the this context of the compilerhost in some cases:  link", "link  good to note! i\u2019ll bug them about it (if they start listening to me) but yes"], ["ok great. what's the advantage of usingpromise<void>overpromise<undefined>in this case? where do they behave differently?", "i don't think it will be different in practice, but void really indicates that you expect no value", "vs undefined implies you would callresolve(undefined)", "even though in practice it won't make a difference, void is more semantically correct", "right, it does seem to make more sense semantically.", "alright i'll try out promise<void> thanks"], ["code  how to do it without typescript warning? b cannot extend a.", "so you want to start with an array ofabut then mutate each element so it becomes ab?", "yes,", "should i create new array of elements instead?", "i don't know,", "i'd need more context, but you can get it to work as is."], ["is there really any benefit in using interface over type", "before  id  you needed interfaces for certain patterns (like some recursive types) now there are fewer differences, but i think still some good use cases for interfaces", "link", "one big difference is that  code  will be treated as if it has an implicit index signature when checking assignability. interface is stricter in that regard. so the type will be assignable to a  code , while the equivalent interface won't be", "interesting, thanks. my error messages are fucking gigantic. i mostly fix them because i know what's wrong. because of really big unions"], ["hello. can anyone tell me how you can access the request interface defined in the passportjs types from your own package?", "code  then,  code . oh,  code  probably don't have to  code  just tried it,  code", "ohh, so just  code ?", "if that  code  namespace is in  code , then that should work. is that meant for declaration merging? just tested it  code . still needs  code . if i remove that line,  code  no longer exists", "yeah, that seems to be working. thanks"], ["can i get the type parameter from a type that has type parameter?  code", "i would just define the t interface. instead of using inference. using t for it is inappropriate since it's not generic. but a concrete interface", "thanks. i know that example is silly but that is only for the sake of example, and i am in a situation that something like genericof will be very useful. we can retrieve type from a value, we can retrieve the keys from a type. no way to retrieve the type of type parameter from a type that has type parameter?"], ["is there some way to get the constructed type from a constructor? typeof type gets the type constructor from a type, but how do i do the reverse", "how is the type constructor available in your code? with function f(x: (new () => t)), you automatically have access to t. i wonder, though, how one can accept ctors with multiple arguments generically. function f<t>(ctor: (new (...args: any[]) => t)): t works, but you lose type information on the arguments, e.g. if you would like to return a new decorated ctor."], ["how do you implement  code  which returns the keys of t that have values in u? i tried   code  but that seems to get all the keys. just can't figure this out.", "code  i think.", "yessssss! thank you!", "great"], ["hey. is there a way to extract types from an enum? i want an union from an enum", "the enum type is a union of the enum members", "i found the solution  code", "oh you meant the names of the enum members.. yeah that works"], ["is it possible to do a keyof of only a single type. example:  code", "code", "you're a hero! thanks!"], ["hi! is it possible to define a typed protocol in typescript, i.e. a function that can take any of n \"messages\" (a tagged union), and has a particular return type for every message", "code  something like that?", "oioh interesting, you can use interfaces as maps from keys to types", "yeah pretty fancy", "that worked; thank you! it's not quite the api i had in mind but it will do i think"], ["i am trying to write a codemod for my project where i want to parse a typescript file and update the imports. i am able to parse the file and convert it into an ast but how should i update the ast so that i can when i print it back the changes are reflected in it.  code", "see here:  link option2 changes call signatures and saves them back to ts files, it should be a good start", "i see, i can't just change the text property then .", "the result of parsing should be imutable, if you change it might break other things, but you can try.. you still need to visit the ast, that is also in there", "ok got it."], ["anyone got an example of a library that attaches an instance to window? i need to create typings for such a library and can't seem to get it to work", "use interface augmentation  code  you can also declare a global  code", "hmmm, says x is not a module", "i have the import like:  code", "i guess i don't get the reference to the window.lp tag with that?", "also with that i get:file directory  is not a module.", "i tried this:  code  but then the lptag is just an empty object and not the one that's attached to window", "not a fun experience :/ my tsc takes 7 seconds to compile so it takes me ages to try something that isn't going to work. trial and error", "expected this to work, but nope :/  code", "i've linked in the library that adds itself to window and am providing an class , so that when i import it, then the script gets loaded.. but then how to get ahold of that window.lptag reference", "with the declare var lptag; when i console.log lptag as i import it, it just seems to be an empty object. not sure wtf that is meant to be"], ["question\u2026 of why is below not reporting type errors :  code", "ok my bad. both have overrides property. fail"], ["hola. hoping i can get sent in the right direction before i give in. i'm trying my hand at unit testing a react app using jest. but i've hit a wall with tslint telling me that mockresolvedvalue for example, does not exist on type. the test runs but i'd still like to know what's the right thing to do. and while i'm at it, is there something else that this community generally prefers to jest in a typescript environment", "i'm not totally sure, but you may need to add \"types\": [\"node\", \"jest\"] to your tsconfig.json. as far as jest itself, i like it very much and use it for testing as much as possible in my ts projects", "thank you. doesn't solve the issue though. my tests compile just fine. it's just the red squiggly line bothering me. i think i'll look into a tslint solution.", "so what i did was this... myobject[memberaddedbyjest] and for tslint i did // tslint:disable-next-line:no-string-literal. no squiggly red lines for now. but i'm open to better suggstions", "generally when something is missing in a typing, you augment the typing (and ideally submit a fix to the official public typing)", "but that's just the thing... how would you do this in this case where i'm using jest to mock an arbitrary object/method? mocking modules from jest's docs", "oh i missed that bit. without thinking too long on it, my instinct would be to use a type cast on the mocked value", "as in (mytype as any).thingaddedbyjest? that works too", "well i wouldn't cast to any... wait now i'm thinking a little more about it. why the heck are you returning mocks that don't match the api of the thing you're mocking?", "lol. checkout the link i just pasted, you'll have a better idea of where i'm coming from... i am indeed mocking the intended api", "the link you pasted i.e. the jest docs?", "yes, that particular section", "if your mock's api matches the module's actual api, how would you have a type conflict? thingaddedbyjest doesn't exist in the module's actual api. which is why you're getting type errors", "agreed"], ["hello guys it seems that exporting an interface in a separate file is not the same as exporting it in a file with other code. i had the false notion that declaring the interface in a separate file was enough", "yes, an interface doesn't have any compiled output", "is there any tutorial on this? i am really not getting this thing. i am watching a tutorial and the guy keeps declaring the same interface. class :  code  class :  code  if i declare this interface in a separate file i get compilation errors", "any ideas? is this code ugly and needs refactoring?"], ["happy holidays to the team. that should give me some time to clean up the issue. maybe those \"intrinsic characteristics\" of the class properties could be maintained in mapped types, and the type system can use them if the mapped type is being passed into the extends expression of a class? could thistype help somehow?", "i\u2019m afraid i don\u2019t know - i\u2019d be guessing just as much as you, my recommendation is to first read  code  then make a test case like the one with the errors, add a breakpoint and go back to where the error is called and take a look at some of the objects", "ah, cool. thanks!", "link  has some good advice for that too. i\u2019m starting to collate it all for the wiki"], ["anyone know how to override webpack dev server complaints about errors while compiling so a reload was prevented? there was a typescript error but it's non fatal. it's just like property x can't exist on type  code  or whatever. because i modified an object after i declared it", "if you use awesome-typescript-loader with fork checker plugin you can split type checking from compilation", "for ts-loader i think there's an option to not do type checking", "what about other errors that are not typescript-related?", "actually ts-loader won't propogate errros to webpack so it will build fine even if you have a few type errors"], ["can somebody explain to me what@means in this code  link", "yeah the @ is usually decorators, but they wouldn't typically be used like@vts.blah(1)they would typically be decorating a class, method, parameter, or something like that.", "i guess it could  be used that way if there was an objectvts that had a function blah( param1:number) that returned another function that would actually be the decorator", "in the code you linked.....vts.componentis a decorator provided by the  vue framework", "a decorator is just a function that gets called when your class is declared. it gets passed in information about your class and can do whatever it wants.", "in this case, it would probably register a component with the vue framework or attache extra information to the class  or any number of things.", "you can read about them here  link"], ["hi guys. i have a typescript project where i have multiple apps beneath the /src folder. it is structured like this.  code  my problem is i'm now seeing something like 50 second build times because everything gets rebuilt on every filesave. i'm wondering if anyone here has encountered a similar problem. it's basically that i have an application which depends on different modules / other smaller applications with their own redux stores. any good way to split this to reduce build-times etc?", "have you tried using tsc --watch rather than rebuilding it all?", "yeah, that is when it uses 45/50 seconds per save. when i disable typechecking, it builds in 4-5 seconds"], ["i have a folder a_play and its subfolder typescriptbasic here is my code of typescript. my tsconfig.json file placed on a_play folder............but when i change on tsconfig file for module property its not working...........? i have image for all but i dont no how to upload it in this platform. plzzzz help i am new in typescript", "please try to include a code example or a gist"], ["i wonder if anyone can help me with this query.  i have an array of line items.  i want to loop over them and convert them to a different type of line items (typical transform type stuff).  but within my loop, the ts compiler is not recognising that my line item as a property called 'quantity' for example", "code example?", "thanks for coming back to me,", "it seems that, my property 'quantity' wasn't seen as public, i had presumed it was public by default.. weird."], ["hi, sorry if this is the wrong place to ask this and there's probably a very obvious answer that i simply haven't found.  code", "very easy:  code", "awesome! thanks for the quick reply", "sure thing! even though, a cleaner, more typescript idiomatic approach would be:  code", "of course, will keep it in mind. thanks again"], ["not really relevant, but for postgres (recent-er versions anyway) using something like  code  is a better experience than using serial for autoincrement ids. of course sequence is a first-class concept in pg (don't think the others do that)", "never heard of this. why is it a better experience?", "permissions on sequences can be a pain and there are some weirdisms that they wanted to replace, and also i think it's more standards-compliant. lemme see if i can scrounge up the article i read about it  link .", "just found that article thx", "code  ftw. i never use that, have to look it up"], ["i am using the following tsconfig;  code  in my .ts files, where ever i have a comment on the last line, the js output is broken. e.g.  code  is this a known ts bug?", "code  does resolve it, but doesn't seem right that it should break on false.", "ts file in question  code", "version id"], ["is there really no way to do type userid = number and then get an error when assigning one to the other, even though they're both number? i know i know structural subtyping stuff but", "you have to tag your type for that :  link  (self promo...)", "yeah, sadly it's not the most useful thing when data is coming down from the server", "in fact, it's possible to write something simpler:  code  cf   link"], ["does a getter at typescript is recommended using angular2 for  component?", "huh? angular2 components are class's", "i know...", "what i meant to ask...is it good practice to use setter and getter at angular classes? getter by definition is getting called at intervals, putting my proparties with it seems to be not so a good idea,", "if you're going to bind data to a getter then no", "it's often a bad idea to bind to a function", "a getter is just a function with synxtaxtical sugar", "which run every change detection is running so i guess it kind of bad prctice", "yup"], ["does this look ok for the class . class", "?do you have al ink to the js file you downloaded", "just do decalre module 'mymod'; no body no block", "if all you don't care things will be any", "yea i can get that need a sec  link"], ["hello", "can i use mapped types with generics somehow? for example:  code   code . so errors should be type hinted as errors.key1 and errors.key2, both resolving to strings and both being optional.   link  is the error i get. same error if i leave errors as an empty object  code"], ["how come the latest release is listed as  id  here:  link  but the version in npm is id ?  link", "it's id for me, check again?", "yeah it's id not sure why you are seeing id", "woah, it literally just changed before my eyes... and yep,nownpm install typescriptpicks up  id", "did it just change? or some kind of cache issue on my local?", "no it's been id since a couple days i think", "must be a cache issue", "yeah i thought so... weird"], ["has anyone here successfully configured directory  so we have the best of both worlds. where new babel syntaxes are supported and typescript linting is supported?", "don't know if that's possible, ts would choke when parsing probably.", "this person seems to have had some success:  link"], ["i don't know how much different are typescript decorators with typescript implementation of decorator pattern", "typescript implementation is like that of python except the parameters passed in", "thanks"], ["hey, guys! i'm having some problems using  code  method. they say i should set compiler options  code . but it didn't help. can anybody advise? probably i need to download these libraries (like npm i, you know...).", "are you having ts problems or runtime problems?", "looks like its all about compiler options. it shows an error in ide  code", "if your target is es2016 then you shouldn't need to set lib to get that. in fact, with that setting you're probably excluding stuff that should be included by default. but still what you have looks like it should work. can you try restarting the ts server?"], ["does anyone have a good boilerplate with react, redux, webpack and typescript. i've found a few but most of them are pretty outdated."], ["what typescript version is suggested for compiling  rxjs ? in order to avoid these issues", "you need core-js or a similar lib to add promise support."], ["hi,", "i wanted to use ts'sharnessapis to better verify the correctness of my typings forramda.js, but had trouble importing them since it doesn't export its namespace. has anyone used these before?", "never heard of harness, what is that?", "typescript uses it to test compilation output for different use-cases to prevent regressions.", "domoritz: my guess class that now only class is possible, but i'm only guessing", "ts.nodeflags.abstract seems to be only available class", "since i have no idea what your ts to json compiler does it is hard to help you out", "tuple is also now in object and reference also", ": json-schema does... schemas for json. his lib would allow reusing ts's compile-time sanity checks during run-time (i.e. on json data coming in over the wire),which is pretty cool."], ["does anyone know if you can use generics and always return passed type or undefined? i'm trying to use generic typings for our local storage implementation. but i can never guarantee that the data actually exists. so i would want to return t | undefined. but when doing this return type is always t for some reason. example:  code . test here is always a string, so dev won't nullcheck it, unless they know what they are doing. is there any way to fix this?", "what happens if you do  code", ": unfortunately the same thing. ignore the first image.", "found the issue. i was in another project then my usual one and forgot we don't have strictnullchecks set to false."], ["is it possible to create an object literal in typescript which extends a class? for example, consider the following:  code    code    code", "you can use class expressions:  code", "oh, interesting!", "js also has__proto__for object literals, but it doesn't play well with ts  code", "you would need to cast it, ts doesn't realise this object inherits fromotherobject"], ["quick question... how do you specify a type of a class with a particular decorator? ie...  code  and then later i want to specify a type...  code", "i don't think you can. decorators are just extra stuff that executes at runtime, they don't affect the type anymore than  code  affects the type of x. which is to say: not at all", ":o i'm shook", "i don't think there's a way to do what you want, since the type of the class is already decided before the decorator runs (the decorator just takes the class as input). of course you can check that the proper decoration exists at runtime (depending on how you've implemented it) but not at type level i don't think", "hmmmm, that is a bummer. i was hoping to use the decorators as a requirement so people don't shove any old (undecorated) class in. ok, thanks!!"], ["hello, why doesn\u2019t this work: const [firsttoken, ...more, last] = tokens; ? it says rest operator should be last. what about spread?", "spread is rest"], ["hi folks)", "hi, i am looking for types for mongo-db-native package mongodb. how can i see if my typesdefs and the lib are in sync?", "you can't thats the problem of community driven typedefs, if author of js lib/framework do not provide them, you can't be sure, even it they are packed together in npm", "okidoki", "so how do i mix libraries with type decl and one without type decl will it default to \"any\"", "depends on tsconfig but generaly yes, those without typeings will be any", "ok"], ["what does this directory  has no default export. if anyone can help me get this working, it is much appreciated:  link"], ["i have an issue  issue  that haven't been triaged for 9 days now while later issues i've opened are already resolved.is it possible it got missed?"], ["anyone here used sinonjs with typescript ? if i import it with import * as sinon from 'sinon'; i get the following error when using usefaketimers() : cannot read property 'now' of undefined. i found somewhere a suggestion of removing the import statement, which works, but then outputs the following errors : \"ts2686: 'sinon' refers to a umd global, but the current file is a module. consider adding an import instead.\" so either i have the import and my tests fail, or i don't, and the compiler outputs errors"], ["anyone know how i can reverse this array of \"readonly\" function tuples? i borrowed reverse<t\u2265 from typescript-tuple. playground  link", "is it possible to zip these two types into an object?  code  half way there?  code", "that doesn't seem to be the case... playground [<-url>] [-code-]  , from yesterday", "thanks!"], ["sorry for this in ts  code  error on let p of myiterablesequence. can some one explain....... why it is causes error", "plzzzzzzzzzzzzzzzzz", "hello.....any one here"], ["i have a question, but so keeps giving me errors trying to submit it:  link", "question finally went through:  link", "is this essentially what you want? more type assertions than i'd like... but no errors.  code  most helpful issue when trying to make that work:  link"], ["i'm having trouble fully groking intersection types. can someone explain how string[] & (string | number)[] is different from string[]?", "you can do x.push(2) the type doesn't really make sense", "ahh, i see. is there any way to simplify the type for immutable arrays?", "what exactly are you trying to describe?", "i'm writing a json-schema validation library, so.... it's complicated", "code  the type isn't really valid", "yeah... i have a return type from my validation function that is returning that type. i'd like it to just return string[]. here is the schema:  code", "so, the top level type is string[], and the inner type is (string | number)[]. i use intersection to combine them, which works well for most cases...", "i think what i am after is this:  code  maybe there is a better name for it"], ["hi folks", "i have a question", "code  what type should dispatch have, i dont want to give \"any\" (react-redux) dispatch is defined like so   code . s from dispatch<s> is not used,  note, this is the orignal \"type\" file of \"react-redux\"", "ok i see its related to this issue  issue , its a \"fix\" on dispatch"], ["hi, i am looking for a way to create an package that expose diffrent entry point for browser and node  code  webpack and friends do understand browser field but typescript cannot. if there is an a way for typescript to resolve to diffrent module based on node/browser env ?", "i am looking for compile time resolution and not runtime checks"], ["hmm, maybe someone can help figure out this?  link  i have a thing which i want to extract an type field type and use it as type for something else. but somehow i am always getting never instead of correct types. a function works as intended but it requires a double callback to make it work, b & c i think its the same just differently written. how can i achieve function a but with b/c styled function or is it not possible ?"], ["i'm having an issue with typing a json file im importing with webpack  code  (buildingsdata as buildings) gives me the error. i know i can fix it by writing (buildingsdata as any as buildings). but it seems like there's got to be a better solution :|"], ["hrm. strange. i'm converting over some old javascript to typescript, and apparently you cannot assign to an element's style property anymore, it's marked readonly. that doesn't sound right, surely. nope, mdn backs up the type definition, it sure is read-only.", "okay, so i've got a variable in the global scope that i want to provide types for, but is otherwise a black box. i create a file called class with this number in it:  code   in my file . however, i'm still getting  code . what else do i need?", "got it. the .d.ts file should actually have been:  code"], ["hi all", "i have issue when lookup object and update value, my browser is crash when update data code . how can i fix it?", "code  just for readability", "thanks for your format.", "everybody can help me? thanks", "code  code . how do i can lookup and update the value object1. my browser is crash when run this code", "you can't, if you use let it will be only available in the for loop", "you mean, we need use var", "code", "thanks"], ["how does structural typing in ts tie into prototypal inheritance ? why doesn't this cause a compile error:  code", "object.create returns any.", "but he forces the variable type to blah", "why wouldn't it say trying to assign any to blah?", "- it works for me. i mean, your playground link. i don't get any error", "me neither... i would assume i would because i'm trying to assign any to blah, or because age is passed as a string.", "any means \"trust me i know what i'm doing don't check anything\" as soon as you have something typed as any ts turns off and just accepts the code. you can make a decent wrapper around object.create that behaves more safely. unfortunately  code   code  will throw at runtime, but ts won't catch it", "then maybe this would work !?  code", "if by work you mean you can't actually use the return value... yes... but there are legitimate (less so now that map exists) use cases for  code"], ["hey everyone quick question, google isn't helping much. when you use outdir do you have to copy node_modules to the outdir yourself as a post tsc step? i am not seeing any flags or config settings to copy it. i swear our code used to copy the folder but when i cleaned the outdir and built again it's not getting copied.", "why would you want that", "to have a self contained library that can be published to npm", "you shouldn't have to touch node_modules. probably something weird with how you're organizing your code if you need to do that", "thought so, thanks!"], ["hello my dear type friends. i would like to ask all your opinions on good conventions regarding how to make the types of functions explicit. there are a few different ways to write them and oftentimes i find myself looking at an illegible nightmare jumble  code"], ["is it possible to type an array so that the first element if one type and the rest are another [number] & string[] is of one type*", "[number, string] i suppose which resolves to [number, string, number | string...]. but not sure if that still works with the latest version of typescript"], ["not quite sure how to ask this question, but is there a good way to get prototype methods on a type? i have a t and i want \"the union type of the string keys the values of which are functions,\" and while i can get that to work for objects, my current approach falls apart for other types. here's a simplified example: playground link  link . i'm not actually trying to write call, but it was the easiest way to demonstrate the situation", "code  it isn't intuitive but  code  gives you a different kind of mapped type from  code", "awesome, thanks! i don't quite get it, but it sure seems to work. guess it's time to learn about extract<>", "similar  link", "ohh that makes a bit more sense. we're rejecting the [index:number] properties with the & string?", "pretty much the same as his, but yeah", "oh ok, that also explains extract! tmyk. thanks"], ["code  how to return this.user value in the above code snippet so that it is accessible in another ts file. it says undefined when i call this function in another ts file", "???", "please help"], ["how can i pass a variable into the scope of a foreach, like so?  link"], ["is there a better way to write this code", "besides using template strings... not sure i'd change anything there dimensions.width ? `width=$ code px` : ''", "wasn't there a way to only do stuff that was not undef?  id  or smth", "not sure, but how about const var = dimensions.width && 'width=' + dimensions.width + 'px'", "are you thinking of the null propagation operator? hasn't been added yet. microsoft/typescript#16", "yeah thx. i thought it was"], ["is there a syntaxwalker visit* method that i can use & override for maps? i want to add a custom tslint rule for maps, and need a visit* walker method to override..."], ["how can i annotate this  code  where the handle* parameters are callbacks", "code  replacing  code  w/ your type. in a pinch  code  should also work but isn't as safe."], ["is there some way to express a non-empty array?", "in a type?", "yes", "coz in runtime code you'd just say myarray.length > 0 of course. but in typing, not that i know of adding items is generally a runtime thing, so typescript can't know what's in the array. however, if you're requiring a specific number of items, then you can do it using the \"tuple\" system", "not a specific amount, only non-empty", "let myarray: [number, number]; ah ok, then to my knowledge there isn't a way of doing that", "i think you're asking for dependent types which isn't supported by ts as far as i know"], ["code  what is the type of _cachedrights? my json is  code  so i thought it would be _cachedrights: boolean[]but perhaps this is not the case?", "types is weird", "why do you do that?", "what'stypes/*??", "you should link to a specific d.ts file. it should be probably pointing to types/index.d.ts if you have one. basically types should point to the d.ts file of  what main is pointing to"], ["anyone know how to extend map so as to provide your own strong typed version", "map is a generic, so you can do:  code", "that's not a type though", "i want to define my own type for usage throughout", "type mymap = map<string, number>; ?", "so interface x implements map<string, sometype> for example", "oh u don't need to extend/implement ?", "what is your usecase?", "ok i'm a bit new to type script, i'll try it out thanks", "code"], ["is there a semver compare tool for .d.ts files ? compares two versions of .d.ts and suggests either major, minor or revision bump based on differences in types", "link  may be able to help with that", "there is some support there for diffing .d.ts files in some capacity", "but i haven't used it", "hmm. it doesn\u2019t seem like its based on the language service api, and... it seems like i might want to read the paper to understand it, and its not linked", "i was thinking, how hard can it be? no changes to types = revision, \u201cadditions\" to covariant positions and removals from contravariant positions = minor, every other change in types = major", ":d", "but thats probably a bit naive"], ["hello...i have a parent react component with the following definitions:  code . i have a child component <doctoritem> that is guaranteed to get the doctoritemproptype by my code logic. but it is giving error that -->  code  since in my doctoritem child file, i have the following definitions:  code . so how can i guarantee to typescript that i will always pass the correct type? thanks!", "you still there?", "hey yes", "impossible to know how the best way is to solve it without knowing more but one to solve it easily is with typeguards. this relys on being able to resolve the string[] case. something like this... 1sec   code", "however, i would say that overloading props between a primative and an object is generally an anti pattern. they make the callers life easier, but the implementers life harder (you). hence why your in this scenario a better fix is to do something like this instead  code  and take an array of docotoritemproptype always, never a string[] and the string[] case can just be mapped to  code . @joektym hope this helps.", "thanks for your help . i will look into type guards or potentially restructuring the data so its always of doctoritem type"], ["hi was wondering i'm using types for example the items props is wrapped in data object from the api that looks like this  code . how can i fix this error property 'data' does not exist on type 'item[]'.", "can you make a similar situation here:  link ."], ["would it be possibe withtscto get  the ast output of a javascript file? and would it be possible to generate a simple d.ts from that ast ?"], ["can typescript output a single .d.ts file now? like if i target  code  a whole directory can i get just a single .d.ts file back? yep got it don't worry. early january finally going to open source like  id  years of my life"], ["hello, i'm sure this has been asked many times. why is the  code  not enough here, and i need a discriminator?  code  in what case will i be able to pass  code  into  code  so that the typeof check wouldn't be enough?", "typescript does not narrow one variable based on another. replace  code  with args or something similar. then narrow args.x which will narrow args and, by extension, args.y", "not really  code", "there's always type predicates, where all else fails  code", "yes, it can be worked around in many ways --- i was just interested in the reason. can't find any info on it. will prob try my luck on so."], ["are you online?", "yes?", "can i borrow a minute from you , please:)?", "i'll answer, if i am able to or someone else will. what's your question?", "i would like to implement this playground. but it should be extending the function by adding additional interfaces to the tparameters type", "wait   code  is what you want.", "thank you very much !"], ["oh i actually tried that  code  but i did that inside the generic and that failed. do we really need the  code  since we already know the value of k", "if you didn't have that someone could pass in a key that doesn't go to a function", "oh you need it for the args hmmm... just trying to wrap my head around it", "i get an error to it actually, or did i do something wrong", "not sure, working playground  code", "hmm maybe it's sandbox", "thanks! don't think i would've figured this out"], ["can someone help show me how to print ast nodes with printer without creating source file and statement ? or is it do-able ?"], ["hey all - i'm searching for some thoughts on a question i've been having regarding the consumption and publishing of third party libraries. i posted it on  link  but i don't know if it'd get much attention as it would here. sorry for the re-post if you saw it over there", "tsc --noresolve are you trying that?", "use the \"-noresolve\" flag during the generation my library's \".d.ts\" file using \"-declaration\" or during the compilation of the consuming module that is importing it?", "i made you a ts version if you want", "link  hope this works"], ["anyone know how to check for instances of vendor-specific apis? liek for example, how do i check if window.mozrequestanimationframe is defined? vs msrequestanimationframe etc", "you mean so typescript won't complain?", "i'd do if  code ...", "otherwise i'd just use a requestanimationframe polyfill."], ["if i'm coding node with ts, should i avoid npm packages which dont have declaration files or a@typespackage?", "if you need package, which dont have typings, so you can write your own", "when i try to use a npm package which doesnt have a declaration file (@types), i get a errorcould not find a declaration file for module 'mylibrary'when i try to import it withimport * as mylib from 'mylibrary';", "how can i get around that error?", "you need to add a declaration at it's most basic you just have to do declare module 'mylibrary'; in that casemylib will be type any", "where should i do it so typescript knows how to use it?", "usually in a file in your project like custom-typings.d.ts and then just make sure you include it in your compilation", "allright, thanks a lot"], ["how do i enable generaotrs in tsconfig so when i use async / await in id so my code will take advantage of generators and thus create a lot less trasnpiled code (i am only targeting latest browsers)  ?", "found it", "sorry didn't find it", "i thought this will do it  code  but still i dont see it taking advantage of generators", "when used  code   same results. also tried   code", "you have to target es6", "\"target\": \"es6\"", "the\"lib\"property is just for type declarations from those libs, it doesn't change what's outpute been able to figure out\"*.d.ts\" files stand for providing typescript code to javascript libraries, doesn't it?"], ["can we safely parse json in typescript in accord to interface types?", "no. json.parse returns any", "is there any library that does that?", "not that i'm aware of. though in most of my cases it was trivial to validate the data myself so i didn't need to look for one...", "validate with like if check or with some more abstract stuff?", "depends on the use case, most recently i wrote an option decorator to be used with class properties, i also let you specify a json options file. since the only options i accepted were booleans, numbers, strings, and string arrays, it was pretty simple to just check the type with typeof and array.isarray", "i see thanks", "there's probably some way to validate interfaces with some process like ts-nameof uses, but i'm not aware of any projects that do this.", "thanks again for that"], ["hi all, quick question on testing with typescript/nodejs. what's the best practice for testing a file (without testing its dependencies/mocking them) if i'm not using an ioc container for dependency injection?", "in the past i've used proxyquire/mockery to \"hijack\" node's require but i'm having a little difficulty getting that setup with typescript+", "with jest (ts-jest) you can mock es6 modules", "the trick/problem is that, when es6 modules imports are transpiled to commonjs require calls they are hoisted to the top of the file", "babel-jest hoist your mock calls above the  require calls, but ts-jest doesn't support it yet.so what you can do is to put your jest.mock calls on a module and import first thing to your test file", "ts-jest has other issues, like sometimes inaccurate coverage reports. but its working and super fast", "anyway, i would advocate to inject all the dependencies and import only type information", "thanks i think i may end up having to do that"], ["could someone tell me:  i have created a utility class with  export class  code .   my question is this, in c# if  you create a 'static' class with a public static function, you don't have to instantiate the class with new.  can you do that with typescript ?  what i'm wondering is if i can just do utility.formatdate()", "yes you can do that if the class has a static function you don't need to invoke it with new"], ["is there an alternative to  code  where i avoid the any?", "you can use unknown in most cases."], ["anyone know a way to create a type union from an array of strings? say i have an array  code ; is there a way to create a type keys = keyof keys; or something?", "you need it to be a tuple of string literals, not an array of strings, but yes:  code . clearly all this has to be static, if you have a dynamic string array you can't derive a static union.", "yeah i have a static list of strings i need to turn into a tuple", "as const makes it a tuple", "i\u2019d also like to see it compress the compiler options down - given how much of it is a red herring. i\u2019ll give it a shot now actually. just wrapped up the inline error messaging for  id", "what does [number] mean?", "it\u2019s a tuple:  link", "i think he means the indexing of a tuple above", "it's an index type - t[k], given obj :: t and key :: k (you don't know which key), what type do i get if i do obj[key]", "got it, i'm telling tsc to index by number", "if it makes it clearer: (typeof keys)[number]. which gives you the union of all types in the tuple.  i'm lacking context here - already tried scrolling up but didn't notice anything relevant... what are you talking about compressing compiler options? @reggi so you're in a bit of a catch-22 here. if you mark the parameter as required, then you always have to specify it. but if you mark it optional, the implicit undefined in its type doesn't contribute to inference. i'm trying to think of a way around it but i'm not sure there is one. maybe overloads?", "i think maybe he means collapsing the compiler options section by default  you probably already got this but typeof keys[0] would be the first item, but number is the union of all numbers, so when you index with numberyou get the union of all values.", "thanks, today i learned!"], ["hi guys.", "has anyone tried building vue.plugin using typescript class? i am trying to get install method triggered but having no luck in doing that. if someone tried please let me know"], ["anyone familiar with how standard javascript engines (ie.  id ) optimize prototyped functions for 'new' instances? i'm wondering if non-static members literally get copied in memory for every new instance or if it's stored in one place in memory with an input for the specific instance.", "if a method exists on the prototype, then there's no copying by definition - the engine walks up the prototype chain to find it. no optimization required, this is how prototype inheritance works. when you do new c(), the engine does (among other things) the equivalent of object.create(c.prototype), where c.prototype is itself an object containing the non-static methods. they are not copied, the instance has an internal .__proto__ property which points to the prototype object and the engine simply follows that whenever a member isn't found directly on the instance", "the prototype is not a \"template\" as the name might suggest - new instances literally point back to the single prototype object", "perfect. thanks! assuming i know the answer here, as the docs say that class () 'creates a new function'. but i wonder if that's how the engine handles it in storage? seems like an area that could be optimized.", "it creates a new function object - you can throw properties onto it and such and the original function object won't reflect them. i can all but guarantee you that it points to the same bytecode in memory though. the function body is immutable. as far as the js code is concerned though, it might as well be a new function", "yeah. that's what i'm thinking. one of these days i'll dig into  id  a bit. monster of a code-base, though! i had to 10x my vm's power temporarily in order to get a relatively quick compile", "to really drive home the prototype thing, you can add a function to array.prototype and this will be visible retroactively to everyone who currently holds an array, not only for newly created ones. it doesn't need to be optimized because this is already how the language works (which is incidentally a big part of why it's recommended not to monkey-patch prototypes of builtins) i can change the behavior of your object after you've already created it", "curious to know why you feel that way. for example, i don't see the harm in extending array within a node application by adding a new method (eg. unique). i absolutely understand the argument on extending object before property descriptors came along, and i understand not altering default methods.  would you mind providing an example scenario where adding a unique() method to array within a node application could be detrimental?", "here's a good example:  code"], ["is there a way to get keyof to iterate over class constructors, or some equivalent for that? what i'm trying to do is take a type, strip all the constructors from it, and return a intersection type of the stripped type and a new constructor. i've tried something like this:  code  but since constructors aren't properties, keyof won't give them up that prevents me from using it later with something like this:  code"], ["say you have a function like  code . there's no way to get more than completion for the literal overload is there? i mean, you can't cause an error on  code  can you?", "i don't believe there is. unless you do something like this:  code", "yeah generics aren't that great either because of unions. i guess it can be overcome though. trying to allow end users to augment something in a lib. one problem is that the arg in the real life original function is optional.", "code  then you can do  code  for an optional arg", "yeah that's awesome. but not super ergonomic for end users. is there a good way to filter literal unions besides uniontointersection?", "not that i know of", "...and there's another optional arg after the other one. i'll play with it. i'd gone down that path earlier but i was a generic overload with the original fallback, which didn't work. thanks!", "good luck"], ["code  is there any way i can avoid declaring overloads? currently i have declared till 10 variables. the above function takes chain of functions and executes them.", "conditional type return type. oh wait so parameters", "the parameters are functions which should take arguments based on chain", "if i remember right those query typings shouldn't even work. because it will try infer t1 from the function parameter and from the first arugment which will result in problems but maybe it was fixed in  id +", "it does work. here is the library :  link , this experimental library is to write linq style code with generator functions"], ["hi i have websocket react app and on every message i receive diffrent message object and i want to store it in usereducer how should i handle this ?", "? not a typescript question got to reactjs gitter; but definitely on the typescript side discriminated union"], ["i see it's on the roadmap but not for any specific version yet. so one other question, regarding npm publishing.if you include a .d.ts with a js npm library, how would you handle fixes to types only? i.e., if the package version doesn't increment, i guess no one will get the updated types.but if the library has primarily js users, they might not want the versioning noise of typescript definition fixes and the maintainers might not want to bump versions for just that.", "type changes seem like a good reason to have a new version", "most users (and maybe maintainers) might not think that way though", "maybe definitely typed is still a better option here"], ["is there a cleaner way to do this:  code", "i guess with weight u actually mean value, right?", "yea updated my example"], ["is it ok that compilation 66 files total of 3k lines takes about 8s?", "takes 11 seconds for me with 16k lines", "how do you count lines - only own code or also code from node_modules?", "just my code", "very strange", "i'm not going through gulp, just plain tsc", "this mean that by that time i will reach 10k lines, compilation would take half a minute . hm.. gonna measure clear tsc..", "set  code", "thats about what i'd expect. gulp adds a few seconds of overhead. it probably also won't use --incremental", "yes gulp and also browserify here gives additional latency. i might be using too many dependencies. 121123 total lines vs 3k my own", "4s is really good. compile times not being linear class loc is something to definitely keep in mind. the type system is so strong that you can basically have compile-time functions. and your compile-time functions can be o(n^2) or o(2^n) or do stuff like busy beaver. you wouldn't expect loc to directly translate to run-time speed. 10 lines of o(2^n) will run slower than 500 lines of o(n), with large enough n", "just found that with gulp it is possible to reduce compilation time for watch task if use since: lastrun to compile only modified files"], ["i'm debating just dropping this mixin helper, because typing mixins is so darn hard, and just using my new  code  inheritance helper which is so simple both in implementation and type system (aside from protected and private members not passing through the mapped type).", "nevermind, figured it out. it requires a boilerplate for the mixin to be typed properly, so the foo definition needs to be  code . i forgot about this. that's a lot of boilerplate! and then i casted away implementation details to any to make it \"just work\" from the end usage perspective. playground example, so far. it's quite a mess. jumping through hoops to use mixins in ts."], ["hi everyone", "why does  link  compile with es5 target and doesn't compile with es2015/es2016?", "interesting, with es5 typescript recognizes that it is an array and transpiles to a for (i = ... loop, but with es6+ it uses an iterator instead and gets confused.", "im not following at all. for...of was part of the es2015 standard so it doesn't get transpiled. it wasn't part of the es5 standard so it does get transpiled and for es2016 same as es2015, it was standardized so is therefore not transpiled. link  specifications at bottom. es5 is the 5th edition of javascript, es2015 is actually the 6th edition; not to be confused with eachother", "unrelated ^ the issue is that switching to the newer target causes a compiler error. interestingly, it works if you don't have the outer battle wrapper...", "weird yeah never seen that; i didn't thought changing the target changes the typechecking", "under es5 it thinks cell is a ui_cell, under es2015 or later it thinks it's a cell. seems to be getting confused by the intersecting of two array types. probably a bug. i would report it"], ["is there any reason **is there any reason that typescript would coerce", "sorry, typing on my phone. is there any reason typescript would coerce a type to any? i'm writing a query builder thing that recursively intersects types to build the result type, but types nested more than 1 level deep just end up as any", "sounds like there's a bug in the typings to me, it shouldn't be any.", "are you doing something like a['prop']? that turns into any if propis optional on a"], ["what are the valid characters for property names in ts? cuneiform  is not (; is there a list/rule-book i can check?", "that is not typescript specific i think, that is javascript in general", "yea, just realized...", "i found es6 character validator"], ["hello! is there a way to generate a union type automatically from all interfaces that extend another interface?  code", "nope, there isn\u2019t something like that in the type system today"], ["is it possible for a function signature to also guarantee a property on the function exists. because in js functions are a type of object they can have properties. i want my type annotation to ensure the function has a specific signature and it has a property. sorry on my phone when i get back to laptop i can explain further", "link", "awesome thanks"], ["will typescript interact with c++? or even embed typescript/javascript api to c++?", "there are some things out there, like nibind, and asm.js that can compile c++ to  js/ts or you can embed chrome  id  engine in c++ and run compiled typescript code."], ["is it possible to overwrite class method types? i just want  code  to be one thing and  code  to be another.  code", "when you write it like that is it actually a \"method\" vs a function property? is there a difference?", "true. i need it to be a function prop tho", "and am i the only one who thinks \"class method\" means a static method on a class? that's always throwing me off.", "i think of it as anything class.method() able is a \"class method\"", "i really don't know about that stuff, don't use classes really."], ["i find myself writing code like this a little bit:  code    code", "you would need to declare the scope of the variable outside the loop, no way around that"], ["how do folks typically learn how to ingest typings from @types? do you just use something from the library that requires some annotation, see how it explodes, add stuff, adjust?", "i generally assume that the @types declarations are accurate and proceed to use the library as if it were any other lib written in ts"], ["has anyone used tsickle (the \"typescript to google closure compiler\" thing)... the docs have a word on running it and developing it but not on installing it :o"], ["hi guys.", "im struggling with an interface definition.  code  should be the same or? webstorm does not recognize the first one...", "you'll have to add tresult as a type-parameter to test as well", "oh. sorry. didn't notice the second line", "yeah..also struggling with gitter ...sorry", "which version of webstorm? works fine in idea 15", "both works, but webstorm (latest  id ) only recognizes x as typeof t for the doit2...so  code", "i don't use webstorm, but idea (which should use the same ts infrastructure) recognizes both", "i wonder if it is a webstorm bug or a undiscovered typescript bug", "i would imagine it's a webstorm bug", "what's up? catch me up to speed", "looks like webstorm isn't inferring a field-type correctly", "weird. if it doesn't work in the playground, i'd file a bug on webstorm"], ["is there a way to get typeof remainder of a curried function? i.e i have the following actiongenerator that i'm basically using as a hack to propagate types.  code  and in my interface i'm using  code  but what i really want is....  code  tl:dr i use typeof (something that implemnts actiongenerator).action as a hack to get the type of the remainder of a curried function. but i want a non-hack way", "solved.  code"], ["hi guys, i am having a hard time getting@types/cal-heatmapto work inside an angular2/ionic2 project. the d.ts doesn't export anything, what do i have to add to benefit from the typings in this case? here they are:  link", "for now, i use a class in my project where i putdeclare module \"cal-heatmap\";but this is only to make the transpiler shut up.", "they are just global declarations", "so you just install them and use them... no need to import anything.", "the declarations assume that there is a globalcalheatmapvariable", "you can do this to make it more friendly so you can import:  code", "put that in your class", "and then do  code  in your files.", "thanks for the tip. i'll try that."], ["hi, could you please help me with the following conflict:  code  i have the following dependencies  code  and tsconfig.json  code", "megaukrainian: only thing that comes to mind is nolib and then manually define the libs in the tsconfig, have a look at  link  --lib. but you could possibly just remove the es6-shim", "thanks,  i'll try"], ["is there anyway to pass a string into an abstract class constructor here  code", "code  or just add a constructor to root", "wouldn\u2019t that work as-is if name was a regular field in the base class? by declaring it as a method it goes to the prototype", "yes that works!"], ["it's amazing how boring cfgs can be. mysql is basically just a 3-4k loc cfg. but my attempt at going through all of it has been an insane slogfest. to make matters worse, parts of the cfg don't even really make sense or have obscure meanings because of all the hacks they used to make it work with bison", "not a big fan of the whole fake precedence through ordered expansions thing", "agreed"], ["and to consider using inheritance when a base class needs a way to access the child (polymorphism)what?", "did you not understand my polymorphism point?", "yep. i didn't."], ["hi. is there any simply way (eg some decorator) to convert an interface to a class which will wrap one such object?  code", "code", "thanks but i would like to make it dynamic (at compile time) so that if the iperson changes my  friend would automatically get the extra properties", "the use case is: i have an api libary which defines its responses using interfaces and returns plain objects. i would like to easily extend some responses with custom functionality without having to manually track and apply changes from the source interface"], ["hey dudes - what's the best way to add methods to an interface? i essentially need a struct. i tried replacing the keyword interface with class, and added a method using js class syntax (ie no function name), but recieve the error  code", "ambient context = .d.ts. it\u2019s just types so you can describe methods there, but you can\u2019t implement them", "it is indeed a .d.ts. what's the difference between describe and implement?", "describe = what types are the parameters and return type. implement = actual code", "oh, thank you! i renamed the file to .ts and it's working now! much appreciated. do i lost anything by doing this?", ".d.ts is if you need to describe the types of code that\u2019s already written. like js code, e.g. if you\u2019re writing ts code, use .ts. since you mentioned structs: .d.ts is like a header file except it can only contain declarations, no logic", "thank you very much. i'm not sure which category this falls into, but essentially i am describing types, but now want to add methods to the types. i'm not sure what a header is (not experienced with c), but i've been using this .d.ts file to store interfaces", "if you need to write code with the methods, use .ts", "thank you - completely solved"], ["can you merge extract with parameters  like to exclude some parameters which are defaulted", "could you show an example? not quite sure what you are after", "sure one sec", "args with defaulted params", "so i have some static params which i supply to a request object and all i want the generic function to ask for are the params which are outside of those", "what's this about autocomplete on keys?", "code  my psuedo code of it", "i don't think that's possible without giving some way for ts to know that the parameter is defaulted. looking just at the types i can't tell that", "ahh okay. that probably makes sense. what if i could how would that look like", "that said, you can do something like this: playground  link", "the types which are default are constant", "thanks definitely helpful !"], ["is there any di/ioc framework (for node.js) currenly widely accepted by typescript community? or is there some method/function in typescript so it\u2019s not needed? couldnt really find anything except the angular one", "link  haven't used it but i know that some people have used that", "would think it's similar to the angular 2 one", "thanks going to check it out", "thre are probably others, although i wouldn't classify any as having \"wide acceptance\" in the community", "angular 2 and aurelia have wide acceptance within their respective communities", "but  probably very few people using them outside as standalone di", "try there's one that's super heavy handed called inversify", "i prefer this one called typedi that i prefer since its api is super simple", "ty inversify looks promesing", "what qualifies as super heavy handed?", "any experience with the performance of it?", "just felt like it was overly complicated to get it to work", "i don't think performance is going to vary much between frameworks", "i doubt it", "they all essentially register dependencies in some kind of lookup table", "and pull from there on instantiation", "so performance wise they will all be similar", "unless they are doing something really stupid", "all i needed was something that registers, gets, and can invoke functions with injected dependencies", "ah ok"], ["hello, how do i rewrite the following js import in typescript (as a one-liner)? const cookieparser = require(\"cookie-parser\")() the function parentheses are throwing me off", "is this the only way?  code", "i don't think you can reassign an import. also, import...from returns an object, not a function. try this:  code", "alright thanks for explaining"], ["@keithlayne does instanceof can be used with gettypeatlocation?", "regarding your question about detection of the error type and descendants: the compiler usually only checks inheritance once, and then lets assignability take care of it. is assignability to error good enough for you? i'm looking at the instanceof-narrowing code, which is the only other place i know of that the compiler worries about inheritance relations.", "yes", "i thought  id  exposed istypeassignableto, although i could be wrong. looks like the compiler also has an internal istypederivedfrom, but it's not exposed publically so you'd have to clone the code. you'll need these two functions:  code . i'm not 100% sure that all of that will work with the public api, but it looks close. (getbasetypes is part of the api)", "thanks"], ["hello! i'm having a type problem. here is a minimal illustrative example:  link . basically, i have a union type which uses an enum property to discriminate between members of the union (is that clear?), however when i try to initialize a value to that union type for which the discriminating property is generic, as in the type of the property is the type of the entire enum not one of the specific enum values, i get an error. sorry that was pretty wordy, but i think the playground illustration is pretty clear?", "looks like you're trying to do something unsafe. and ts is protecting you. playground  link", "take out the type annotation and this is inferred:  code  which is not (assignable to) thing", "alright, thanks folks"], ["is there an opposite of the  code  operator?", "@gerrit0 do you know how to type a function  code  like  code  and have the  code  be type checked as a property of the top-level object, the  code  type checked as key of the second-level object referenced by  code , and  code  type checked as a key inside of  code ? is it possible?", "reccccursion", "basically i'd like for  code  to be a type error because  code  isn't a key inside of b, and for  code  to work fine.", "i've written such a helper before. i'll have to dig through my notes to find it. in your case, though, you'll want [] as const. or use rest params. seems unneeded now that optional chaining exists", "oooh, that'd be nice if it's possible", "in this case, it's actually  code  from ryan's solid.js, and state is read-only. i'm curious to know if that property path can be safely typed.", "i see. i'll send you what i have when i get home. i should really use one of those github gist thing for my snippets that don't really belong anywhere. this is like the fifth time someone has asked for something like that =x", "it can  iv'e seen a recursive tuple path object key solution before. however you're better off using a api more typescript friendly. here's an api i wrote for immutable structure sharing whatever its a getter and a setter and its like 500bytes or whatever beast mode easy to use api  code"], ["hello.", "i think i've found a bug in the typescript type system but i don't know enough to be sure. could i please have a hand determining if it is a bug (or if i am just confused) and perhaps finding a workaround? specifically, the following code won't compile, even though to me it looks like it should:  code . what confuses me is that, although the first assignment is not allowed, the second two assignments, which look to be equivalent, are allowed. i tested this on  link  as well as id so it should be recent.", "the problem is that you overtyped the get() method in getter. it's always gonna be number | string or not, hmm. i didnt see that you implements. no idea, but it's a pretty weird pattern. i think you should do it with generics", "generics is a good idea \u2014 i'll give that a try for my actual use case. in this case, though, i'm not sure if i should report it as a bug. specifically it seems that return types for type intersection for two interfaces takes the type intersection of the return values, but the type intersection of an interface and a class takes the type union of the return values. i'll test out that theory.", "it's stranger than that: apparently type intersection is not commutative. here is a more concise example: code . shouldn't x and y be the exact same?", "it looks like this is intended behaviour  link , though i am not sure why. sorry to have bothered you all, and thank you for the suggestions.", "wow that really looks like a bug. i had no idea a & b and b & a could be different"], ["hey guys", "i was wondering, do imports of the same file in multiple files generate code duplication?", "no imports don't genrate any code", "they just generate  code", "or the equivalent depending on what you configure your module in tsconfig.json", "ah ok but require produces code, no?", "no it's just a function that returns an object of whatever that file exports. each time you call require you get the same instance so no duplication", "oh interesting", "it is really recommended you start filling in your typings as you code... so if you come to a method like  code", "so i can import that as often as i want and wont end up having the same code multipe times in my bundle", "you can then go into your typing and do something like:  code", "pretty cool", "treeshaking is then just to eliminate code that is not used, right?", "yeah tree shaking is to remove parts from within a module that were never imported", "nice, thanks"], ["code    code    code", "according to the type string | date your start date could either be a string or adate. only the date has the method toisostring()- the string does not. so typescript is smart enough to prevent you from calling a method that potentially does not exist during runtime."], ["hello. can you help me? i have a problem with typescript and visual studio 2017. essentially i'm writing team foundation service web extensions. vs2017 just can't compile typescript because it can't find modules, although modules are installed by nmp package manager in project. i have this error error ts2307: build:cannot find module directory  vs2017 can't find any module (however installed by npm!) on build there is not much info on stackoverflow as all suggestions ends with \"install newer/fixed version of typescrtipt\". interestingly, intellisense does provide correct list of modules to select when i edit ts code, but compiler can't find any module. is typescript is completely broken in visual studio and i must use visual studio code instead because hot heads at microsoft seems to completely abandon windows in favor of macs?", "it's how modern \"cross platform\" works. windows excluded. i just created clean project to reproduce the problem. no customizations. it just doesn't work out of the box!", "i have spent couple of days in futile attempts to just make work a simple \"hello world\" with typescript on vs2017.", "ok, finally i have figured how to make it work. sorry for emotions."], ["code  it's consistent with what i've said. if webpack says, \"i can't find this file\", it's not lying to you. it didn't find the file and then pretend that it hasn't found it", "well that may have to do  with search strategy, base-paths, mappings, etc.", "yes, that's exactly what it has to do with", "i thought that part was clear \"can't find file\" means, \"can't find file\"", "require('')will not use typescripts module resolution strategy", "it's just pased through to webpack while import will use typescript module resolution which will try several different paths and things", "if you don't get a compile time error with typescript that means typescript has found it", "but typescript search paths might not always equate to webpack settings, so a lot of times webpack settings need to be tweaked to match", "usually only the case if you are using path mapping or multiple source roots in typescript"], ["hi, i asked this before but i can't go so deep in gitter chat to see if there is some answer. why i would want to use the compiler optioneclaration for generate declaration files of my typescript code instead of publish an interface that define my public api?"], ["given this:  code  why does this cause an error:  code  but this does not:  code", "ahh.. the dangers of javascript type coercion", "it's actually keeping you from doing a  subtle error. templatetype.complexis equal to 0", "so when you do !templatetype on a templatetype.complexit will actually return true", "which means on the right hand side of your ||templatetype will never be able to be templatetype.complex", "you should just always avoid doing short hand!templatetype when you actually mean to do a null check", "you should always be explicit on your null checks, or you'll run into a lot of subtle js bugs.", "ah i see..that makes sense now", "thank you"], ["will this work? npm search@types/arcgis-js-api. i see only@typesversion  id  is on npm (i looked at valid install targets). i see the vendor also released version  id  some time ago on github but not updated npm", "can i just copy paste the t.ds file over the index file and be done with it?  link   link  the 2 versions", "no i would not copy over the file into the@types/folder. just don't use the@types for that one if there is no npm package available for it", "ok", "just use typings command or download it manually and add it to your files:[] array or your includes:[]"], ["is there any way to pass one type argument and have the other(s) inferred? basically i have something like this:  code", "no, search gh for partial inference. was scheduled at one point, pushed back, and then removed. workaround is to have curried generic functions, pass the param on the outside, infer on the insid"], ["tsconfig paths - having an issue with using similar names.  code  issue 1: can't make reference to @core within components core.issue 2: would have the word @core in both confuse the compiler?"], ["link  why is that?", "i think you need to do something like  code", "thanks. why doesn't it work simply with  code", "well seems like you want to access a class' property like it's on object i.e. has no instance. so you need to query it with typeof  link"], ["can i import a variable as a different name? eg, if i export routes, import it somewhere else as adminroutes? i'm getting a variable conflict and trying to figure out how to resolve it", "so in short, for anyone watching (  )... import  code  from \"./my-routes\";", "ah, thanks, donno how i missed that in the docs. i knew the import * as"], ["hey, i got interface like  code  but my objects extend that interface with other keys, like  code  can i somehow specify that once a key is added to that interface, every object in that array should contain it?", "not sure to get you, how do you intend it to work", "code  // error: someotherkey not present on second object of abc interface", "ok, i see  code  abc &  code  allow other keys", "thanks, will try"], ["i'm trying to write a generic function wrapper but running into issues. could someone help me  link  ?", "even if you use  code  you'll have issues because  code  might be  code ... i don't think there's a way to fix this as trying to have  code  in the parameter doesn't help since  code", "thanks for responding! i don't fully follow your explanation, could you elaborate? on the surface, this seems really similar to how react hocs work, passing props to a child component. what am i doing different?", "you are trying to describe a function h which takes an argument with a property a which must be a string, but because the type h is generic, all you can assume within the function body is that a is a string. you might try to create a middleware function where a can't be  code , but can only be  code , so typescript doesn't allow it. this might be helpful in understanding  link", "interesting, that makes sense, thank you! is there a way to express that h must have a: string as part of its type? as opposed to a subtype of a: string which is what extends suggests", "i filed an issue here:  issue"], ["is there any way to specify a type as \"anything except x\"? for example, i have an  code  ... but really i want it to not allow a particular type definition (an interface)", "that would require negated types  issue", "oh, that looks like it's actually going to be a thing or is it still just being discussed...? either way, not currently available, sadly", "i think there are design issues that are holding it up. but yeah, can't currently do it"], ["how do i check if theres is more then one param to a function, if so return a type array of all params, if not just return the first? attempt:  code . oh i think i got it:  code", "i'd prefer  code  since it makes it explicit that you are checking the size of the tuple", "amazing"], ["hi, i have a question regarding monaco-editor, hoping this is a good place to ask. i'm trying to figure out the best way to achieve what i want - i need typescript support, but i also need some fine grain control to put some sugar on typescript (e.g when certain types of completions are requested i want a custom behavior, etc.). monaco-typescript, which is a great package, takes me some way, but it does not allow fine-grained control (plus other limitations coming from the fact it's focused on single files). i was hoping to use lsp, but i was unable to find a typeacript lsp solution in a web worker, and i want it to run on the client. can someone help me figure out the best approach? is there an lsp for tyescript in web workers that i missed? is my best bet forking monaco-typescripy and extending/modifying it? thanks in advance!", "have you looked at the completion api for monaco  link  ?", "yes, and it can work, but i mostly want typescript support, plus some additions. that's why i prefered if there was already a full blown solution that i could wrap/extend. i saw that there is an issue in monaco-typescript in which one of the maintainers suggests forking it as an option", "it seems like you should be able to use typescript-monaco and just add a custom completer on top of it... i'm not very familiar with it", "i think an lsp implementation would be better, but as i said, can't find an implementationfor web workers... oh, that's actually interesting, i wonder how it will work. if i register another e.g completion provider, how will the two behave together? will i be able to override behavior from one (e.g in case a condition is met return something which is not the ts completion, else -> ts)", "for that i bet you'd have to unregister the existing ts completion and re-register a wrapper that calls it, i would expect monaco to call each completion provider in turn and use the union of their return values to present completions... i haven't played with it though. closest i've gotten to monaco is turning on an option that was causing a bunch of errors since it was missing."], ["hey everyone, i'm struggling with building out my jsdoc type annotations in a js project using vscode, i hope this is the right forum for this. i have a setup like this:  code . when i look at my model instance i see somemethod from the base class and othermethod from the subclass, but i cannot figure out how to annotate the subclass using jsdoc to add documentation about the dynamicprop in the schema. i could really use a tip on this, i've tried everything i can think of.", "i've tried  code . however i get the error  code , i'd like to cast the model type to mymodel but i can't figure out for the life of me how to do so.", "with that jsdoc, i think you've made dynamicprop a property/field of the class, whereas you wanted it as a property of the schema obj passed to constructor. also, why not just annotate on the constructor?  code", "sorry, i wish i had an answer, but i think what you are asking might not even be possible, and imho, kind of goes against how static type checking works. if an object is allowed to have a key of arbitrary name assigned with any value at runtime, i don't see how or why the checker would infer a type other than \"any\". for example, see -  link  even in native typescript, if i explicitly state that a class can have dynamically assigned members, the best i believe i can get back is \"any\" as the type for new dynamically assigned members. ts is really good at inferring types within the class, as long as they are in actual code and not assigned dynamically, so you could maybe get around this if dynamicprop and otherprop are strings out of an allowedpropsname array or something like that. this talks about how types are inferred within classes -  link . maybe this is also possible using generics... looks like vscode supports the @template jsdoc, but that is above my current level of experience. i'd love to see if anyone else has a solution for this, or if you find one!", "thanks for your thoughts. we considered ts when we made some major changes to the code base, but settled on an in-house \"type validation\" system using json schema (draft 4), so it's not really \"anything goes\", the models have a fixed schema, the schema is picked up by the super class and the properties are added at that point, but they're really hard to annotate. i converted the schemas to ts interfaces but had limited luck getting my code to infer those types as well. i'll definitely take another look at @template, i've glanced at it a few times but i don't fully understand it's purpose. i'll take another look.  thanks again", "no problem, and best of luck on that!", "why use classes? just use functions to instantiate types of your model. classes and interfaces do not work well if you need a non-fixed length list of properties. you can do  code  easy with type aliases. you can't with classes and interfaces. this is just a case of using the wrong tool for the job", "interesting, that's an approach i hadn't thought of. thanks for the tip, i'll consider that"], ["is there a way to convert two union types into an object type?", "code  probably what you want, without more context", "code", "unions aren't ordered.  code", "ah. alright, thanks for the information", "you could probably do it with tuples and get the tuples as unions if you needed them that way", "how would tuples do it?", "i don't think it'd be simple", "alright."], ["is possible to write this in a way that doesn't emit a compile error?  code  other than making foo of type string | undefined or i guess that's the right way to do it...", "if you know that foo will be assigned prior to that if() you can tell the compiler so with definite assignment. if not then string | undefined probably makes sense"], ["noob here. i have a subdir with several .ts files that would like to share types. where do i put them? create a new .ts file that they all import? create a .d.ts file? (i know that .d.ts files declare types but i'm not exactly sure where they are supposed to go or their loading protocol.)", "it depends, if the type doesn't exactly belong with any of the files, yea, a new .ts file is probably best. only use .d.ts files for global types."], ["hiya, what's the best practice today for importing components dynamicly? like, \"import(varpathfrombackend);\"", "maybe this is what you need  ?", "i'm doing somthing like this, but with .then() syntax.gonna switch to async/await, thanks. how can i get rid of \"critical dependency: the request of a dependency is an expression\" warning in webpack?"], ["hello, i'm trying to make use of the upcoming conditional types. i've got a function app(state, reducers) that gets state (nestedmap<primitive> where type nestedmap<t> =  code . how would i type this?", "so basically, i want something where  code . here state is the object that resides on the foo of the first object", "code  the thing here is that it should infer what the state in the reducers should be  code  right now it tells me state is implicit any where it should deduct infer it from the first parameter and tell me that state is of type  code", "@alber70g i don't think this is possible with the type system to capture the nesting level in one argument and to project it onto another."], ["do you have an idea for   link", "yeah you trying to do a discriminated union?", "they type of type has to be a literal type", "right now it's just a string  code", "they also probably shouldn't be classes.", "use interface whenever possible for developing these apis. you can make classes to construct them if you want", "still not working.", "does this mean i have to create a type'a'?", "that should work for certain", "paste your full real code", "ok sorry this is indeed working", "but this was a minimal", "now what if i use a var  code", "no change, it will still infer the type of a_type is string and won't narrow it to the literal string 'a'", "but i can't doreadonly type: a_type = a_type", "yea because that wouldn't make any sense", "a_type is a value not a type", "it's an alias/name for a value in your program", "when the code sees a string literal, it assumes unless given other context that it must be of type string", "i actually have a ticket open about a use-case where i think this is not-awesome   issue", "i don't understand what this is doing  code  because if i do  code  this works, but the type function is not creating any type. t is string ?", "where are you gettiug this code from?", "that doesn't look like something you would write accidently", "link  absolutely not lol", "i'm trying to understand", "gotcha"], ["one more question, where do we typically put our definitions in a typescript library. like... types.ts in each directory where it's relevant?", "it's a hack for sure but  code", "atm i have import  code  from directory", "doesn't seem to be a clear answer", "if the library is a single file, the types and implementations all go in the single .ts file. alternately you could put types declarations in a .d.ts file i suppose. i tend to put type definitions at the top of such files", "ok"], ["code . error can not read property name of undefined. help me i am new on typescript. plzzzzz", "topic name is type aliases", "what version of typescript compiler are you using .", "its id", "i think you're running into a runtime error, not a compile time error. you're never assigning people to any value. so it initializes to undefined", "is perfectly right when pointing out the runtime error... the compiler instead warn that 'people' is being used before being assigned", "yes its run time error than what is way to get out from it", "yes its run time error. then you have to assign it a value. as you would with ordinary js code", "oh i understand...... thanks for giving your precious time"], ["hey guys.", "what's your favorite ajax npm utility that has built in typescript support? or should i go with something like 'request' and grab a .ts from definitelytyped?", "as long as there is typings shouldn't be any difference between a ts and a js lib"], ["is this correct behaviour or have i cocked something up? interface goat  code  are identical, a function takes stream<goat> but i've given it a stream<sheep>, it's not breaking  code", "typescript is a structural type system, not nominal so it sees identically structured interfaces as compatible.", "here is some more reading on it directory", "thank you  i found that too, i was surprised but i guess in practical terms it won't be so much of a problem. goats are kinda like sheep", "you could use their 'brand' workaround, defining interface goat  code  so the two interfaces differ but not in a way programmers would use", "hrm thank you  that's kind of useful"], ["hi, what do i need to do to get my typescript module which is hosted on my private github group to be used as a module dependancy for other projects from other users in my group?  i read that i should not put my .d.ts or my .js files in github, but they should be in my  module and the .ts files should not be in the module but should be in my github.  publishing the module privately isn't an option sadly.", "and option you can consider (i'm not sure if the best one) is using git submodules and your users have relative imports to your submodule location."], ["does anyone have idea on why this code does not compile undernoimplicitany?   code", "how would it know the type of s?", "notestrs<t>has an index signature, if i delete the first overload ofmutations, it compiles", "i think the type algebra might be too much for the inference engine and you just have to specify it", "this is a reduced example, in real world code the first argument is too complex to get manual annotation", "i guess there is some problem in overloading resolution and contextual inference, but cannot debugging further deeper.", "probably this is a related issue to  issue", "yeah it looks like that would be it. it's not clear that they are fixing that anytime soon though."], ["hey there. i'm a bit confused reading some articles online. do i still need to use webpack if i'm using typescript?", "most likely. it will do your minification etc. we use awesome-typescript-loader", "ah, so typescript can do the bundling, that's about it? in that case, maybe it's best to leave that to webpack as well"], ["does it make sense to do boolean|void as return signature of a function?", "want to know what i think ?", ":)", "yes please tell me", "it's programatically right but designely weird"], ["hey, easiest way to transform a string into a json? the string is already in a valid json format, only a bracket at the beginning and at the ending (was originally an array of json objects). anyone has an idea?", "json.parse(validjson)"], ["to follow up on my questions about the transition to ts  id  for  link  , most test are passing now but i'm a bit stuck class ()used to return the complete comment but now i'm not seeing comments that start with@any more. e.g.  link", "i believe changes to this function cause missing comments in  link", "looks like it's  issue", "the json schema looks like the one microsoft is using for ms flow and such"], ["how do you extend an rxjs observable?  code  from  link"], ["hey guys. i want to convert the number type which is coming from backend to an enum which i have created. but i am getting an error in this line  code . how do i resolve it?", "try with  code .", "tried that but it but getting this error.", ": as  code  should do.", "code  should also do the trick.", "actually, i should have been clearer.  code  you can add  code  to that, but it wouldn't make a difference.", "no work, thanks"], ["how would one type in interface a \"search function to be executed on user input. can be a synchronous function or a promise.\" this works but doesn't pass linter in definitelytyped:  code . this doesn't which is recommended way via  code . am i missing something in the arrow function syntax or  code  is simply not possible?", "assuming that \u201ccan be function or promise\u201d is accurate and is not actually supposed to be \u201ccan be function or async function\u201c, then the correct type would be  code . note the parentheses. without the parens it\u2019s interpreted as a single function type that returns a union type", "you are correct."], ["i have a feeling that  code  is not correct for case when t is a class. because there under the hood two cases: 1. t.key, 2. class . or ts handles that?", "how are you using context and methodname in that function?", "um", "are you doing some kind of dynamic dispatch against the object?  code  or something?", "code  something like this. contextmethodname or something ? actually there  code  = ...", "ah, you are adding a method to the provided object, but with an async suffix for the name (and presumably some derivative functionality)?", "yap", "code  will compile fail because inst is a myclass, and at compile time myclass doesn't have a fooasync function on it. same for the object example.", "ahhh, i see. well, i don't know if this function can be used at all in ts. its just little helper from whole lib", "the definition for that function will work, and be better than nothing (significantly). just be aware that your use case examples won't work in ts as supplied.", "to be honest i am not interested in ts version. this lib was designed for vanila js and async/await things. just some guy decided to include ts definition in it. and now i am going to publish next version with some changes and thinkning what to do with those definitions)", "definitions are good/helpful, and i would encourage you to include them if they are are not incrorrect. you don't need to have perfect definitions for the definitions to add value (sometimes significant).", "ok ) thanks guys"], ["has anyone ever made a web assembly drag and drop library or i wonder how long it will be untill someone does"], ["hello! what does cfa stand for?", "control flow analysis", "control flow analysis, or \"how ts knows how to narrow types inside conditional statements\"", "cool! thanks"], ["what is this about:  code", "the wording is a bit confusing but seems self-explanatory: there are several files in your project that would produce the same output file. so they would overwrite each other (leading to unusable output) if not for the error", "ahhhhh you are right  i have a .ts and .tsx file with the same name", "did you solve your issue?", "i did thanks again for your help"], ["can i use jsdoc types globally. i have bunch of variables that are going of same type. i want annotate type at top. if there is there different type then change type for only that variable."], ["is it possible to have a type variable in typescript, that can be passed around and used in declaring a generic?"], ["you know what would be neat? compiling to ts to js, and having the types preserved in the output in the form of jsdoc comments. is this possible? it'd make inspecting library code (f.e. in vs code) more pleasant, in cases when we're doing that. sometimes i open up files in node_modules to quickly test small changes. maybe the .d.ts files would be enough, but those type only the external interfaces, not internal code like jsdoc can.", "link might actually be the wrong package looking at it again ^ but i know somebody has done that"], ["is there any way to get feedback when you hit the max depth limit", "yes. the feedback is \"instantiation is excessively deep and may be infinite\" and your build fails. btw i think the  code  to make your type parameter usable, while not common knowledge, is a fairly common hack to try to make defaults work for generically-typed parameters. it's like a fake lower bound. but it can also affect inference, for example   code  is a hack to make it infer tuple types", "i thought it silently gave up and became any? yeah i thought i had figured something out, should have known better", "it does not:  code", "well, i wasn't intersecting a concrete type though, but the effect is probably similar", "side effects of intersecting of generics/otherwise deferred types is beyond my powers of divination to say what happens. you're on your own there :stuck_out_tongue:. ts has a concept of priority for generic inference. it's technically an implementation detail but at least one team member has said they don't plan to break i"], ["any suggestions on how i can implement abstract classes so that both typescript and javascript consumers get a good experience? currently my es6 version contains methods that just throw  code , but marking those methods as abstract in typescript gives a compiler error since they now have implementations. the best solution i can come up with is to have an abstract class used by typescript consumers, and a regular class with a bunch of ts-ignore to ignore the compiler errors", "i'd rather not make the experience worse for non-typescript users if at all possible", "you could use a transformer to emit a method that throws the error whenever abstract is found in the ast. i've written a few custom transformers before - i could look into it further for you if you'd like otherwise, you can use an interface & then implement via a class. that'll also mean you don't have a hard runtime requirement"], ["hey guys", "i think i've found a bug in the type checker , would you mind checking this out? maybe i'm missing something, or is it a bug??  link"], ["hey there. i'm a bit confused reading some articles online. do i still need to use webpack if i'm using typescript?", "most likely. it will do your minification etc. we use awesome-typescript-loader", "ah, so typescript can do the bundling, that's about it? in that case, maybe it's best to leave that to webpack as well"], ["hello guys, i'm with a problem here. i have the following class:  code  and in another class i have the following property:  code  on a method i'm trying to set a new entry with this, but i got an error. this isn't a valid use case? or i'm missing something?  code"], ["hi, i'm trying to promisify the sign function of node-jsonwebtoken, but the function have two version, one of which is sync one without callback, another one is async one with callback. so the problem is tsc don't know which function is the one it need, how can we solve it ?", "this is why i really hate overloads... i believe you should be able to promisify it if you specify the generic types manually.  code", "it work like a charm, thanks a lot!"], ["hello!", "does anyone know where the version number for types pulled using@types/librarycan be found online? i\u2019m trying to figure out whether i have the most recent version of published types.", "well if you just npm install it will update to the latest", "that\u2019s not what i\u2019m looking for, though", "there should be a package.json inside the directory  directories that would have the version number in it, just like anything else from npm", "i use npm update checker to check for updates and tell me what version of everything i have.", "or are you referring to what version of the lib a particular npm package works with?", "i see that but i am looking in the repo on github and package.json isn\u2019t there", "pretty much every package in the@typesscope is magically generated", "there\u2019s a mistake in the types for three.js", "and i\u2019m trying to figure out whether i should update first or if i\u2019m already on latest", "you have to actually go into the node_modules directory in your project", "just use npm view to see  all the versions available for a package", "ahh, that\u2019s a big help! thanks.", "link", "very cool", "i use this though, to check all my dependencies and report what updates are available", "that is really helpful", "but in any case, if you want to be on the latest version and you are not sure...just run npm install @types/library again that will always bring you up to the latest"], ["can i force typescript to trust a cast?", "what do you mean by \"trust\"?", "like if i implement a safer function that the type system cannot verify is correct, can i cast it. such that i'm saying \"trust me compiler, this is correct\"", "yes", "yeah"], ["i have two separate files that export nothing and i want to compile them both as separate entities in both i have const a = 1 and it marks it as duplicate. any help?  code  basically these two files are very similar, but they export nothing and should be completelt distinct and separate entities. i've tried with different modules. but no help. it's outputting two separate fils correctly. but it creams at me for duplicates. apparently adding a random export let a = undefined in code makes it not scream lol. is this a known bug? where can i track it?", "expected. a file without any export is global i think it's named a script", "oooh that actually makes sense, a script, not a module. tnx"], ["should it be possible for me to override the interface user  code  in that passport type definition by using a similar process then?", "link  yeah, you can use declaration merging for most stuff.  code  try sticking that in some file and checking if it shows up in request.user. although the singleton type true may seem artificial, ...  stares at typescript and its literal types", "that does seem to work. i was testing it on express.user instead of class or request.user. what is causing it to merge with request instead of being added to express? (notice how user is a sibling of request, not a child in the passport typedef)", "you're saying req.user does not contain mycustomlabel?", "no, i am saying it does, but that was unexpected for me. i was expecting to be able to do:  code  because user and request are declared at the same level. i'm just trying to understand how user isn't merged into the rootexpress namespace, but request is.", "where is this user variable coming from, in your first example? i've never known user to be a property of import * as express from \"express\"; then again, it's not like i use express often", "code", "just use class or use express.user, instead of trying to import  code", "i understand, but mycustomfield isn't part of the express package either. so i was just trying to understand why user didn't get merged into express the same way mycustonfield got merged into request.user. for sure though,  code  solves my problem, and i'll be using that.", "because user is not part of the express package. request is part of the express package, though. express.request extends express-static-core.request extends class . so, when you import  code  from \"express\"", "ah, i see, thanks."], ["hey ho! can somebody tell me what's wrong with my typings here? the inference of the encoding prop and the acc.data doesn't work  link", "ok, i figured i have to make the class generic. someone pointed this out to me."], ["hi! i have a problem with types of function/constructor arguments. typescript playground  code . if a constant with object is passed, typescript ignore checking of additional properties. same behavior with function arguments. is it expected behavior?", "that's kinda odd behavior, here's a simplified example:  code .  that's expected behavior, typescript doesn't check for excess properties. generally, except when constructing an object literal  code  is assignable to  code , so it succeeds when you pass obj.  you can bypass this problem by using  code  instead", "no, that wont actually work either, because you can't construct a never.  this'll work though:  code . beware that solution isn't perfect,  code  is not an error."], ["anyone have any ideas on why the return here isn't typed?  code  playground  link . even this does not work:  code", "you didn't give it a type. it defaulted to unknown.", "there\u2019s no inference site for b in that function", "hmmmmm, so it's not possible to infer the input of hello and assign its type to x?", "tapsingle doesn\u2019t know what the input will be, it\u2019s just returning a function that can be called later", "code  maybe more what you want?", "this works: playground  link . you just need to move the scope of b to the inner function.", "oh, i didn\u2019t realize that\u2019s what he wanted to do", "you don't want b to be inferred until the inner function is applied", "i thought he wanted b to constrain the input, rather than be typed by it and got confused. it\u2019s a curried function, that makes sense now", "oh, i might not understand myself. these questions are hard to phrase.. looks like  had the same solution a moment earlier", "first!  yeah the return type is still  undefined, which isn't that great", "it's correct, though; input is optional", "yeah", "thanks  and"], ["are there any npm packages for polyfilling ec2015 in typescript? e.g., the new array methods?", "just use any js polyfill lib, then just lib in your tsconfig to inform the compiler your env has those methods", "if i set a lib flag in tsconfig, that only works if i use a polyfill that gives me everything in ecmascript2015, doesn't it? it effectively asserts typings for all of ec2015", "i supports finer options than that, check the docs"], ["i am getting the following messages when i run tsc.  code . i have node_modules  as exclude in tsconfig.json", "you have two conflicting declarations for require. you likely have directory  is there a reason you need both?", "is your project amd?", "nope", "then try uninstalling@types/requirejs", "thanks a million, i removed @types/requirejs and all is happy!", "thanks"], ["if you should never use number why does it even exist?", "never is a too strong word", "oh.", "you should always use primitives and let javascript handle the boxing/unboxing thing like number are there to serve as the prototype for all number operations", "and it's ok to use number as a function to do runtime type conversion", "e.g.var mynumber = number('5')", "although discouraged... if you really needed to add something to the number prototype you could do so... e.g.  code", "cool"], ["how would this work in function form? not talking about logic, just typing  code  seems to give me \"any\"", "try  code  on those args. probably won't work", "does!", "sweet"], ["hi, i am beginner in typescript, and i would like  to ask next question: in js arrow functions don't have own \"this\" and \"arguments\" and what about ts functions?", "arrow functions are transpiled to regular functions if your target is es5 but i believe this is assigned to a variable to lock the execution context.well in general, how something behave in ts should closely follow how it behave in js."], ["could somebody give me a helping hand in order to generate a npm module from a typescript library? which steps would i need to follow?i've created a  link  in order to give access to the code.", "basically converts it to mongoose-way", "just add declarations: true to your ts config", "and add types: class to your package.config", "let me a time in order to dive a bit into what declarations: true and types: class means", "declarations true makes tsc output class file for every.js file it outputs and types in pacakge.json just points to it", "mmm, as far i've been able to figure out\"*.d.ts\" files stand for providing typescript code to javascript libraries, doesn't it?", "by other side, class is generated or is hand-made?", "when you compile ts it produces a.js but the js has no information about the types. if you have declarations: true, it will also produce class file which has the type information", "the.d.ts file is only used if you import that module in another typescript project", "got it!"], ["would you say this router is looking like a framework? or can i still get away with calling it vanilla?", "i don't think you should fixate on labels", "who cares?", "hehe", "i'm gonna demo it in the  link"], ["hey! is@types/angular-mocks removed? npmjs tells me that the latest version is \".0\" and i can't find it in dt on github", "link", "i see that but the latest version is stated as \".0\"", "well if they use that in their package json so it is", "true, but i can't find it on dt on github.", "that's why i think they maybe removed it. but could just be a mistake", "link", "oh... it's in another branch", "link", "they pull it from types- id  branchs"], ["anyone have any good docs on a recommended project structure when creating npm packages with typescript? our current setup is  code  however, /test/ isn't a collection of unit tests in our case, but a web app bundled with wepback for testing our component in an app. but, the tests end up being distributed in directory it seems a little odd. is there a better way?", "use .npmignore?", "i setup two projects (project and dist)  code  here's what my tsconfig look like  code"]], "role": [[0, 1, 0, 1, 0, 1, 0], [0, 1, 0], [0, 1, 1, 1, 1, 1], [0, 0, 0], [0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0], [0, 1, 0], [0], [0, 1, 0], [0], [0, 0, 1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 1], [0, 1, 0, 0, 1, 0, 1], [0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1], [0], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0], [0], [0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0], [0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 1], [0], [0, 1, 0, 0, 0, 1, 0], [0, 1], [0, 1, 0, 1], [0, 0], [0, 1, 0], [0], [0, 1], [0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0], [0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1], [0, 1, 0], [0, 1], [0, 1, 0, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0], [0, 0], [0, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0, 1], [0], [0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0], [0, 1, 0, 1, 1], [0, 1, 0, 1, 1], [0, 1], [0, 0, 1, 0, 0, 1, 0], [0], [0], [0], [0, 0, 1, 0], [0, 0, 0], [0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0], [0, 0], [0], [0], [0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0], [0], [0, 0], [0, 1, 0, 1, 0, 1, 0], [0, 0, 0], [0], [0, 1, 0, 1, 1, 0], [0], [0, 1], [0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0], [0, 1], [0], [0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0], [0], [0, 1, 0, 1, 1], [0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 1, 0], [0, 1], [0, 1], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1], [0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1], [0, 1, 0, 0], [0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1], [0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 1], [0, 1, 0, 0], [0, 1], [0, 1, 0], [0, 1], [0, 1, 0, 1, 0, 1], [0, 1], [0, 1], [0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0], [0, 1, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1], [0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1, 1], [0], [0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1], [0, 1], [0], [0, 1, 0, 1], [0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1], [0, 1], [0, 1, 0], [0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 1], [0, 1, 1, 0, 1, 0], [0, 1], [0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0], [0, 1, 1, 0, 1], [0, 1], [0, 0, 0, 1], [0], [0, 1, 0, 1, 1, 1, 0], [0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0], [0, 1, 1, 0], [0, 1, 0, 1, 0], [0], [0], [0, 1], [0, 1, 0, 1, 0, 1], [0, 0, 1], [0, 0], [0, 1, 0], [0], [0, 1, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1], [0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0], [0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1], [0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1], [0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1]], "edge": [[[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [1, 3], [3, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1], [0, 3], [3, 0], [3, 4], [4, 3], [3, 5], [5, 3], [0, 6], [6, 0], [6, 7], [7, 6], [6, 8], [8, 6], [6, 9], [9, 6], [8, 9], [9, 8]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [0, 6], [6, 0]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [1, 3], [3, 1], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9], [10, 11], [11, 10], [11, 12], [12, 11], [12, 13], [13, 12], [13, 14], [14, 13], [14, 15], [15, 14]], [[0, 1], [1, 0]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9], [10, 11], [11, 10], [11, 12], [12, 11]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 0]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0], [0, 2], [2, 0], [0, 3], [3, 0], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9], [10, 11], [11, 10], [11, 12], [12, 11], [12, 13], [13, 12]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [1, 3], [3, 1], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [0, 2], [2, 0], [1, 3], [3, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 0]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [5, 8], [8, 5]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0]], [[0, 0]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [2, 4], [4, 2], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 0]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [0, 3], [3, 0], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 0]], [[1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 0]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [3, 5], [5, 3], [4, 6], [6, 4], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0]], [[0, 0]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1], [1, 3], [3, 1], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [0, 2], [2, 0], [2, 3], [3, 2]], [[0, 1], [1, 0], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [0, 5], [5, 0], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [0, 4], [4, 0], [3, 5], [5, 3], [5, 6], [6, 5], [6, 7], [7, 6], [5, 8], [8, 5], [8, 9], [9, 8], [9, 10], [10, 9], [4, 10], [10, 4], [10, 11], [11, 10], [11, 12], [12, 11]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9], [10, 11], [11, 10]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [1, 3], [3, 1], [3, 4], [4, 3], [4, 5], [5, 4], [1, 6], [6, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0]], [[0, 1], [1, 0]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [1, 3], [3, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [1, 10], [10, 1], [10, 11], [11, 10], [11, 12], [12, 11]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [0, 5], [5, 0], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [0, 2], [2, 0], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [4, 6], [6, 4], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9], [10, 11], [11, 10]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [2, 4], [4, 2], [4, 5], [5, 4], [5, 6], [6, 5], [0, 7], [7, 0], [7, 8], [8, 7], [8, 9], [9, 8], [7, 10], [10, 7], [9, 11], [11, 9], [10, 12], [12, 10], [11, 13], [13, 11], [13, 14], [14, 13], [13, 15], [15, 13], [15, 16], [16, 15], [16, 17], [17, 16], [17, 18], [18, 17], [12, 19], [19, 12], [19, 20], [20, 19]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [0, 2], [2, 0], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [0, 8], [8, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [2, 4], [4, 2], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [1, 8], [8, 1], [7, 8], [8, 7], [6, 9], [9, 6], [8, 10], [10, 8], [10, 11], [11, 10], [10, 12], [12, 10], [12, 13], [13, 12], [13, 14], [14, 13]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [1, 4], [4, 1], [2, 4], [4, 2]], [[0, 1], [1, 0]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [0, 6], [6, 0], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1], [1, 3], [3, 1], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7]], [[0, 1], [1, 0]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9], [10, 11], [11, 10], [11, 12], [12, 11], [12, 13], [13, 12], [13, 14], [14, 13], [14, 15], [15, 14], [15, 16], [16, 15], [16, 17], [17, 16], [17, 18], [18, 17], [18, 19], [19, 18], [19, 20], [20, 19], [20, 21], [21, 20], [21, 22], [22, 21], [22, 23], [23, 22], [23, 24], [24, 23], [24, 25], [25, 24]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [4, 6], [6, 4], [5, 6], [6, 5], [6, 7], [7, 6], [4, 8], [8, 4], [7, 8], [8, 7]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [0, 3], [3, 0]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [0, 3], [3, 0], [0, 4], [4, 0], [3, 5], [5, 3], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9], [10, 11], [11, 10], [11, 12], [12, 11]], [[0, 0]], [[0, 1], [1, 0], [0, 2], [2, 0], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 0]], [[0, 0]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 0]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [1, 4], [4, 1], [3, 5], [5, 3], [5, 6], [6, 5], [4, 7], [7, 4], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9], [10, 11], [11, 10], [10, 12], [12, 10], [12, 13], [13, 12], [12, 14], [14, 12], [14, 15], [15, 14], [14, 16], [16, 14], [16, 17], [17, 16], [16, 18], [18, 16]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [2, 4], [4, 2]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [1, 2], [2, 1]], [[0, 1], [1, 0], [0, 2], [2, 0], [2, 3], [3, 2], [3, 4], [4, 3], [0, 5], [5, 0], [0, 6], [6, 0], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9], [10, 11], [11, 10], [11, 12], [12, 11], [12, 13], [13, 12], [12, 14], [14, 12], [13, 14], [14, 13]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5]], [[0, 1], [1, 0], [1, 2], [2, 1], [0, 3], [3, 0], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]], [[0, 1], [1, 0]], [[0, 1], [1, 0], [0, 2], [2, 0], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [5, 7], [7, 5], [7, 8], [8, 7], [8, 9], [9, 8], [9, 10], [10, 9]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]], [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3], [4, 5], [5, 4], [5, 6], [6, 5], [6, 7], [7, 6], [7, 8], [8, 7], [8, 9], [9, 8]], [[0, 1], [1, 0], [1, 2], [2, 1]]], "label": [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}